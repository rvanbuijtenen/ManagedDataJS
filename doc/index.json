[
  {
    "__docId__": 1,
    "kind": "external",
    "name": "Infinity",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity",
    "memberof": "framework/.external-ecmascript.js",
    "static": true,
    "longname": "framework/.external-ecmascript.js~Infinity",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 2,
    "kind": "external",
    "name": "NaN",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN",
    "memberof": "framework/.external-ecmascript.js",
    "static": true,
    "longname": "framework/.external-ecmascript.js~NaN",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 3,
    "kind": "external",
    "name": "undefined",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",
    "memberof": "framework/.external-ecmascript.js",
    "static": true,
    "longname": "framework/.external-ecmascript.js~undefined",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 4,
    "kind": "external",
    "name": "null",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null",
    "memberof": "framework/.external-ecmascript.js",
    "static": true,
    "longname": "framework/.external-ecmascript.js~null",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 5,
    "kind": "external",
    "name": "Object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "framework/.external-ecmascript.js",
    "static": true,
    "longname": "framework/.external-ecmascript.js~Object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 6,
    "kind": "external",
    "name": "object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "framework/.external-ecmascript.js",
    "static": true,
    "longname": "framework/.external-ecmascript.js~object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 7,
    "kind": "external",
    "name": "Function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "framework/.external-ecmascript.js",
    "static": true,
    "longname": "framework/.external-ecmascript.js~Function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 8,
    "kind": "external",
    "name": "function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "framework/.external-ecmascript.js",
    "static": true,
    "longname": "framework/.external-ecmascript.js~function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 9,
    "kind": "external",
    "name": "Boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "framework/.external-ecmascript.js",
    "static": true,
    "longname": "framework/.external-ecmascript.js~Boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 10,
    "kind": "external",
    "name": "boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "framework/.external-ecmascript.js",
    "static": true,
    "longname": "framework/.external-ecmascript.js~boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 11,
    "kind": "external",
    "name": "Symbol",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
    "memberof": "framework/.external-ecmascript.js",
    "static": true,
    "longname": "framework/.external-ecmascript.js~Symbol",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 12,
    "kind": "external",
    "name": "Error",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",
    "memberof": "framework/.external-ecmascript.js",
    "static": true,
    "longname": "framework/.external-ecmascript.js~Error",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 13,
    "kind": "external",
    "name": "EvalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError",
    "memberof": "framework/.external-ecmascript.js",
    "static": true,
    "longname": "framework/.external-ecmascript.js~EvalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 14,
    "kind": "external",
    "name": "InternalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError",
    "memberof": "framework/.external-ecmascript.js",
    "static": true,
    "longname": "framework/.external-ecmascript.js~InternalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 15,
    "kind": "external",
    "name": "RangeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError",
    "memberof": "framework/.external-ecmascript.js",
    "static": true,
    "longname": "framework/.external-ecmascript.js~RangeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 16,
    "kind": "external",
    "name": "ReferenceError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError",
    "memberof": "framework/.external-ecmascript.js",
    "static": true,
    "longname": "framework/.external-ecmascript.js~ReferenceError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 17,
    "kind": "external",
    "name": "SyntaxError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError",
    "memberof": "framework/.external-ecmascript.js",
    "static": true,
    "longname": "framework/.external-ecmascript.js~SyntaxError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 18,
    "kind": "external",
    "name": "TypeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError",
    "memberof": "framework/.external-ecmascript.js",
    "static": true,
    "longname": "framework/.external-ecmascript.js~TypeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 19,
    "kind": "external",
    "name": "URIError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError",
    "memberof": "framework/.external-ecmascript.js",
    "static": true,
    "longname": "framework/.external-ecmascript.js~URIError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 20,
    "kind": "external",
    "name": "Number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "framework/.external-ecmascript.js",
    "static": true,
    "longname": "framework/.external-ecmascript.js~Number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 21,
    "kind": "external",
    "name": "number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "framework/.external-ecmascript.js",
    "static": true,
    "longname": "framework/.external-ecmascript.js~number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 22,
    "kind": "external",
    "name": "Date",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",
    "memberof": "framework/.external-ecmascript.js",
    "static": true,
    "longname": "framework/.external-ecmascript.js~Date",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 23,
    "kind": "external",
    "name": "String",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "framework/.external-ecmascript.js",
    "static": true,
    "longname": "framework/.external-ecmascript.js~String",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 24,
    "kind": "external",
    "name": "string",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "framework/.external-ecmascript.js",
    "static": true,
    "longname": "framework/.external-ecmascript.js~string",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 25,
    "kind": "external",
    "name": "RegExp",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
    "memberof": "framework/.external-ecmascript.js",
    "static": true,
    "longname": "framework/.external-ecmascript.js~RegExp",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 26,
    "kind": "external",
    "name": "Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
    "memberof": "framework/.external-ecmascript.js",
    "static": true,
    "longname": "framework/.external-ecmascript.js~Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 27,
    "kind": "external",
    "name": "Int8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array",
    "memberof": "framework/.external-ecmascript.js",
    "static": true,
    "longname": "framework/.external-ecmascript.js~Int8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 28,
    "kind": "external",
    "name": "Uint8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
    "memberof": "framework/.external-ecmascript.js",
    "static": true,
    "longname": "framework/.external-ecmascript.js~Uint8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 29,
    "kind": "external",
    "name": "Uint8ClampedArray",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray",
    "memberof": "framework/.external-ecmascript.js",
    "static": true,
    "longname": "framework/.external-ecmascript.js~Uint8ClampedArray",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 30,
    "kind": "external",
    "name": "Int16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array",
    "memberof": "framework/.external-ecmascript.js",
    "static": true,
    "longname": "framework/.external-ecmascript.js~Int16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 31,
    "kind": "external",
    "name": "Uint16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array",
    "memberof": "framework/.external-ecmascript.js",
    "static": true,
    "longname": "framework/.external-ecmascript.js~Uint16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 32,
    "kind": "external",
    "name": "Int32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array",
    "memberof": "framework/.external-ecmascript.js",
    "static": true,
    "longname": "framework/.external-ecmascript.js~Int32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 33,
    "kind": "external",
    "name": "Uint32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array",
    "memberof": "framework/.external-ecmascript.js",
    "static": true,
    "longname": "framework/.external-ecmascript.js~Uint32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 34,
    "kind": "external",
    "name": "Float32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array",
    "memberof": "framework/.external-ecmascript.js",
    "static": true,
    "longname": "framework/.external-ecmascript.js~Float32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 35,
    "kind": "external",
    "name": "Float64Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array",
    "memberof": "framework/.external-ecmascript.js",
    "static": true,
    "longname": "framework/.external-ecmascript.js~Float64Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 36,
    "kind": "external",
    "name": "Map",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
    "memberof": "framework/.external-ecmascript.js",
    "static": true,
    "longname": "framework/.external-ecmascript.js~Map",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 37,
    "kind": "external",
    "name": "Set",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
    "memberof": "framework/.external-ecmascript.js",
    "static": true,
    "longname": "framework/.external-ecmascript.js~Set",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 38,
    "kind": "external",
    "name": "WeakMap",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
    "memberof": "framework/.external-ecmascript.js",
    "static": true,
    "longname": "framework/.external-ecmascript.js~WeakMap",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 39,
    "kind": "external",
    "name": "WeakSet",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
    "memberof": "framework/.external-ecmascript.js",
    "static": true,
    "longname": "framework/.external-ecmascript.js~WeakSet",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 40,
    "kind": "external",
    "name": "ArrayBuffer",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
    "memberof": "framework/.external-ecmascript.js",
    "static": true,
    "longname": "framework/.external-ecmascript.js~ArrayBuffer",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 41,
    "kind": "external",
    "name": "DataView",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
    "memberof": "framework/.external-ecmascript.js",
    "static": true,
    "longname": "framework/.external-ecmascript.js~DataView",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 42,
    "kind": "external",
    "name": "JSON",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",
    "memberof": "framework/.external-ecmascript.js",
    "static": true,
    "longname": "framework/.external-ecmascript.js~JSON",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 43,
    "kind": "external",
    "name": "Promise",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
    "memberof": "framework/.external-ecmascript.js",
    "static": true,
    "longname": "framework/.external-ecmascript.js~Promise",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 44,
    "kind": "external",
    "name": "Generator",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",
    "memberof": "framework/.external-ecmascript.js",
    "static": true,
    "longname": "framework/.external-ecmascript.js~Generator",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 45,
    "kind": "external",
    "name": "GeneratorFunction",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction",
    "memberof": "framework/.external-ecmascript.js",
    "static": true,
    "longname": "framework/.external-ecmascript.js~GeneratorFunction",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 46,
    "kind": "external",
    "name": "Reflect",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",
    "memberof": "framework/.external-ecmascript.js",
    "static": true,
    "longname": "framework/.external-ecmascript.js~Reflect",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 47,
    "kind": "external",
    "name": "Proxy",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
    "memberof": "framework/.external-ecmascript.js",
    "static": true,
    "longname": "framework/.external-ecmascript.js~Proxy",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 48,
    "kind": "file",
    "name": "framework/dataManager/DataManager.js",
    "content": "import {MObject, MObjectHandler} from \"./MObject\";\nimport {parseSchema} from \"./Schema\";\n\n/**\n * mix is an anonymous function that returns a new MixinBuilder for the superclass\n *\n * @param {Class} superclass - an ES6 class definition that should be extended with mixins\n * @return {MixinBuilder} An instance of MixinBuilder for the given superclass\n */\nlet mix = (superclass) => new MixinBuilder(superclass);\n\n/**\n * MixinBuilder is a class that dynamically constructs a prototype chain for the superclass\n * given to its constructor.\n */\nclass MixinBuilder {  \n\n\t/**\n\t * @param {Class} superclass - an ES6 class definition that should be extended with mixins\n\t */\n\tconstructor(superclass) {\n\t\t/**\n\t\t * @type {Class}\n\t\t */\n\t\tthis.superclass = superclass;\n\t}\n\n\t/**\n\t * with takes an arbitrary number of mixins as argument. A mixin is defined as follows:\n\t *\n\t * (superclass) => class extends superclass {}\n\t *\n\t * This definition results in an anonymous class that extends the given superclass. This way\n\t * we can reduce an array of mixins starting with this mixinBuilder's  superclass.\n\t *\n\t * @param {Function} mixin1,mixin...,mixinN - an arbitrary number of mixins that the superclass should be extended with\n\t *\n\t * @return {Class} this mixinBuilders superclass extended with all given mixins\n\t */\n\twith(...mixins) {\n\t\treturn mixins.reduce((c, mixin) => mixin(c), this.superclass);\n\t}\n}\n\n/**\n * The factory function constructs a new instance of an MObject with the appropriate\n * mixins applied to it.\n *\n * @param {String} klass - A string representing the klass of the managed object.\n * @param {Object} inits - An object containing initial values for the managed object\n * @param {*} [otherArg1,otherArg...,otherArgN] - Any other parameters passed to the factory are \n * considered other arguments. These other arguments are passed to the constructor of the managed object \n * and are meant to be used by mixins. Each mixin can then extract its required extra parameters from the otherArgs\n *\n * @return {MObject} A proxied managed object that matches the schema and implements all mixin functionality\n */ \nclass FactoryHandler {\n\tconstruct(target, argumentsList, newTarget) {\n\t\treturn target.apply(target, null, argumentsList)\n\t}\n}\n\n/**\n * The DataManager consists of a constructor that receives a schema and optionally a number of mixins as input.\n *\n * The schema is parsed and for each klass a factory function is assigned to this[klassName]\n *\n * Finally a proxy is wrapped around this instance of the basicRecord factory that\n * ensures factory.klassName(inits, args) call is forwarded to the factory function as\n * factory(klassName, inits, args)\n */\nexport class DataManager {\n\t/**\n\t * @param {Object} schema - A raw JSON schema describing the objects that should be constructed by this data manager\n\t * @param {...Function} [mixin1,mixin...,mixinN] - an arbitrary number of mixins that should be used to extend managed\n\t * objects constructed by the basic data manager\n\t */\n\tconstructor(schema, ...mixins) {\n        /**\n         * An array of mixins for the managed objects created by this data manager\n         * @type {Array}\n         */\n        this.mixins = []\n\n        /* set mixins for the factory function. If the basic data manager did not receive\n         * any mixins we set it to an empty array */\n        if(mixins.length > 0 && mixins[0] != undefined) {\n            this.mixins = mixins;\n        }\n\n\t\t/**\n\t\t * The schema property holds the parsed schema that can be used by the factory function\n\t\t * @type {Schema}\n\t\t */\n\t\tthis.schema = parseSchema(schema);\n\n\t\tfor(let klass in this.schema.klasses) {\n\t\t\t/**\n\t\t\t * Strings and Symbols corresponding with a klass defined in the DataManager's\n\t\t\t * schema map to DataManager.factory\n\t\t\t * @type {Function}\n\t\t\t */\n\t\t\tthis[klass] = new Proxy(this.factory.bind({\n\t\t\t\tschema: this.schema.getKlassByName(klass),\n\t\t\t\tmixins: this.mixins,\n\t\t\t\tklass: klass\n\t\t\t}), new FactoryHandler())\n\t\t}\n\t}\n\n\t/**\n\t * @param {Object} inits - An object containing initial values for the MObject\n\t * @return MObject - A proxied MObject\n\t */\n\tfactory(inits) {\n\t\tlet mobjClass = {};\n\t\tif(this.mixins.length > 0) {\n\t        mobjClass = (class extends mix(MObject).with(...this.mixins){});\n\t    } else {\n\t        mobjClass = (class extends MObject {});\n\t    }\n\n\t\tlet mobj = new mobjClass(this.schema);\n\t\tlet mObjProxy = new Proxy(mobj, new MObjectHandler());\n\n\t\t/* The MObject needs a pointer to its own proxy for when an inverse field is found */\n\t\tmObjProxy.setThisProxy(mObjProxy);\n\t\tmObjProxy.init(inits);\n\t\t\t\n\t\treturn mObjProxy;\n\t}\n}",
    "static": true,
    "longname": "/home/gebruiker/Documenten/BSc/code/ManagedDataJS/src/js/framework/dataManager/DataManager.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 49,
    "kind": "function",
    "name": "mix",
    "memberof": "framework/dataManager/DataManager.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "framework/dataManager/DataManager.js~mix",
    "access": "public",
    "export": false,
    "importPath": "ManagedDataJS/framework/dataManager/DataManager.js",
    "importStyle": null,
    "description": "mix is an anonymous function that returns a new MixinBuilder for the superclass",
    "lineNumber": 10,
    "params": [
      {
        "nullable": null,
        "types": [
          "Class"
        ],
        "spread": false,
        "optional": false,
        "name": "superclass",
        "description": "an ES6 class definition that should be extended with mixins"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "MixinBuilder"
      ],
      "spread": false,
      "description": "An instance of MixinBuilder for the given superclass"
    },
    "ignore": true
  },
  {
    "__docId__": 50,
    "kind": "class",
    "name": "MixinBuilder",
    "memberof": "framework/dataManager/DataManager.js",
    "static": true,
    "longname": "framework/dataManager/DataManager.js~MixinBuilder",
    "access": "public",
    "export": false,
    "importPath": "ManagedDataJS/framework/dataManager/DataManager.js",
    "importStyle": null,
    "description": "MixinBuilder is a class that dynamically constructs a prototype chain for the superclass\ngiven to its constructor.",
    "lineNumber": 16,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 51,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "framework/dataManager/DataManager.js~MixinBuilder",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "framework/dataManager/DataManager.js~MixinBuilder#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 21,
    "params": [
      {
        "nullable": null,
        "types": [
          "Class"
        ],
        "spread": false,
        "optional": false,
        "name": "superclass",
        "description": "an ES6 class definition that should be extended with mixins"
      }
    ]
  },
  {
    "__docId__": 52,
    "kind": "member",
    "name": "superclass",
    "memberof": "framework/dataManager/DataManager.js~MixinBuilder",
    "static": false,
    "longname": "framework/dataManager/DataManager.js~MixinBuilder#superclass",
    "access": "public",
    "description": "",
    "lineNumber": 25,
    "type": {
      "nullable": null,
      "types": [
        "Class"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 53,
    "kind": "method",
    "name": "with",
    "memberof": "framework/dataManager/DataManager.js~MixinBuilder",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "framework/dataManager/DataManager.js~MixinBuilder#with",
    "access": "public",
    "description": "with takes an arbitrary number of mixins as argument. A mixin is defined as follows:\n\n(superclass) => class extends superclass {}\n\nThis definition results in an anonymous class that extends the given superclass. This way\nwe can reduce an array of mixins starting with this mixinBuilder's  superclass.",
    "lineNumber": 40,
    "params": [
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "mixin1,mixin...,mixinN",
        "description": "an arbitrary number of mixins that the superclass should be extended with"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Class"
      ],
      "spread": false,
      "description": "this mixinBuilders superclass extended with all given mixins"
    }
  },
  {
    "__docId__": 54,
    "kind": "class",
    "name": "FactoryHandler",
    "memberof": "framework/dataManager/DataManager.js",
    "static": true,
    "longname": "framework/dataManager/DataManager.js~FactoryHandler",
    "access": "public",
    "export": false,
    "importPath": "ManagedDataJS/framework/dataManager/DataManager.js",
    "importStyle": null,
    "description": "The factory function constructs a new instance of an MObject with the appropriate\nmixins applied to it.",
    "lineNumber": 57,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "klass",
        "description": "A string representing the klass of the managed object."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "inits",
        "description": "An object containing initial values for the managed object"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "name": "otherArg1,otherArg...,otherArgN",
        "description": "Any other parameters passed to the factory are \nconsidered other arguments. These other arguments are passed to the constructor of the managed object \nand are meant to be used by mixins. Each mixin can then extract its required extra parameters from the otherArgs"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "MObject"
      ],
      "spread": false,
      "description": "A proxied managed object that matches the schema and implements all mixin functionality"
    },
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 55,
    "kind": "method",
    "name": "construct",
    "memberof": "framework/dataManager/DataManager.js~FactoryHandler",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "framework/dataManager/DataManager.js~FactoryHandler#construct",
    "access": "public",
    "description": null,
    "lineNumber": 58,
    "undocument": true,
    "params": [
      {
        "name": "target",
        "types": [
          "*"
        ]
      },
      {
        "name": "argumentsList",
        "types": [
          "*"
        ]
      },
      {
        "name": "newTarget",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 56,
    "kind": "class",
    "name": "DataManager",
    "memberof": "framework/dataManager/DataManager.js",
    "static": true,
    "longname": "framework/dataManager/DataManager.js~DataManager",
    "access": "public",
    "export": true,
    "importPath": "ManagedDataJS/framework/dataManager/DataManager.js",
    "importStyle": "{DataManager}",
    "description": "The DataManager consists of a constructor that receives a schema and optionally a number of mixins as input.\n\nThe schema is parsed and for each klass a factory function is assigned to this[klassName]\n\nFinally a proxy is wrapped around this instance of the basicRecord factory that\nensures factory.klassName(inits, args) call is forwarded to the factory function as\nfactory(klassName, inits, args)",
    "lineNumber": 72,
    "interface": false
  },
  {
    "__docId__": 57,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "framework/dataManager/DataManager.js~DataManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "framework/dataManager/DataManager.js~DataManager#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 78,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "schema",
        "description": "A raw JSON schema describing the objects that should be constructed by this data manager"
      },
      {
        "nullable": null,
        "types": [
          "...Function"
        ],
        "spread": true,
        "optional": true,
        "name": "mixin1,mixin...,mixinN",
        "description": "an arbitrary number of mixins that should be used to extend managed\nobjects constructed by the basic data manager"
      }
    ]
  },
  {
    "__docId__": 58,
    "kind": "member",
    "name": "mixins",
    "memberof": "framework/dataManager/DataManager.js~DataManager",
    "static": false,
    "longname": "framework/dataManager/DataManager.js~DataManager#mixins",
    "access": "public",
    "description": "An array of mixins for the managed objects created by this data manager",
    "lineNumber": 83,
    "type": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 60,
    "kind": "member",
    "name": "schema",
    "memberof": "framework/dataManager/DataManager.js~DataManager",
    "static": false,
    "longname": "framework/dataManager/DataManager.js~DataManager#schema",
    "access": "public",
    "description": "The schema property holds the parsed schema that can be used by the factory function",
    "lineNumber": 95,
    "type": {
      "nullable": null,
      "types": [
        "Schema"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 61,
    "kind": "member",
    "name": "[klass]",
    "memberof": "framework/dataManager/DataManager.js~DataManager",
    "static": false,
    "longname": "framework/dataManager/DataManager.js~DataManager#[klass]",
    "access": "public",
    "description": "Strings and Symbols corresponding with a klass defined in the DataManager's\nschema map to DataManager.factory",
    "lineNumber": 103,
    "type": {
      "nullable": null,
      "types": [
        "Function"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 62,
    "kind": "method",
    "name": "factory",
    "memberof": "framework/dataManager/DataManager.js~DataManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "framework/dataManager/DataManager.js~DataManager#factory",
    "access": "public",
    "description": "",
    "lineNumber": 115,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "inits",
        "description": "An object containing initial values for the MObject"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "MObject - A proxied MObject"
    }
  },
  {
    "__docId__": 63,
    "kind": "file",
    "name": "framework/dataManager/MObject.js",
    "content": "import {MFieldFactory} from \"./fields/MFieldFactory.js\";\n\n/**\n * MObjectHandler provides a get and a set trap for the proxy that is wrapped around a\n * managed object. The set trap simply invokes our custom set() function on the MObject.\n * get first checks whether the requested property in the object is a function. If it is\n * we execute that function. Otherwise, the requested property key is forwarded to our custom\n * get() function in the MObject\n */\nexport class MObjectHandler {\n\t/**\n\t * @param {Object} target - The target object.\n\t * @param {String, Symbol} propKey - The name of the property to get.\n\t * @param {Object} receiver - Either the proxy or an object that inherits from the proxy.\n\t *\n\t * @return {*} Either the value of the requested property or a function that executes the requested property\n\t */\n\tget(target, propKey, receiver) {\n\t\tvar propValue = target[propKey];\n\t\tif (typeof propValue != \"function\"){\t\t\n\t\t\t/* if the property is not a function: return MObject.__get(propKey) */\n\t\t\treturn target.get(propKey);\n\t\t}\n\t\telse{\n\t\t\t/* return a function that executes the method call on the target */\n\t\t\treturn function(){\n\t\t\t\treturn propValue.apply(target, arguments, propKey);\n\t\t\t}\n\t\t}\n\n\t}\n\n\t/**\n\t * @param {Object} target - The target object.\n\t * @param {String, Symbol} propKey - The name of the property to set.\n\t * @param {*} value - The value to set the property to\n\t * @param {Object} receiver - Either the proxy or an object that inherits from the proxy.\n\t *\n\t * @return {Boolean} true if setting the value was succesful. If setting the value failed an \n\t * exception is thrown ny the managed object\n\t */\n\tset(target, propKey, value, receiver) {\n\t\t/* invoke MObject.__set(propKey, value) */\n\t\treturn target.set(propKey, value);\n\t}\n}\n\n\n/**\n * MObject implements the basic functionality for managed data:\n * \n * It provides a set() and get() method for managed fields that will be invoked by the proxy\n * wrapped around this object. Managed fields are stored in the 'data' property of an MObject.\n *\n * Furthermore, it provides a notifyArrayChanged() callback that will be invoekd whenever an\n * ArrayMField changes its state.\n */\nexport class MObject {\n\t/**\n\t * Constructor function for a managed object\n\t *\n\t * @param {KlassSchema} schema - A KlassSchema describing the data property of this managed object\n\t * @param {String} klass - A string representing the klass name of tihs managed object\n\t */\n\tconstructor(schema) {\n\t\t/**\n\t\t * @type {Object}\n\t\t */\n\t\tthis.data = {};\n\t\t/**\n\t\t * this.proxy may only contain a pointer to the proxy wrapped around this instance of MObject\n\t\t * @type {Object}\n\t\t */\n\t\tthis.proxy = {};\n\n\t\t/**\n\t\t * @type {KlassSchema}\n\t\t */\n\t\tthis.schema = schema;\n\t}\n\n\t/**\n\t * Init function that initializes the data property with managed fields and sets an initial\n\t * value if this was provided in the inits parameter\n\t *\n\t * @param {Object} inits - An object containing the initial values for this MObject\n\t */\n\tinit(inits) {\n\t\tfor(let propKey in this.schema.fields) {\n\t\t\t/* Initialize an empty MField for each field defined in schema */\n\t\t\tthis.data[propKey] = MFieldFactory(\n\t\t\t\t\t\t\t\t\tthis.schema.getFieldSchema(propKey),\n\t\t\t\t\t\t\t\t\tthis.proxy\n\t\t\t\t\t\t\t\t);\n\t\t}\n\n\t\tfor(let propKey in inits) {\n\t\t\t/* Set all provided initial values. The MField will throw an error if a value is invalid */\n\t\t\tthis.set(propKey, inits[propKey]);\n\t\t}\n\t}\n\n\t/**\n\t * A MObject needs to know its own proxy, since we need to pass a proxied reference of the MObject \n\t * that an MObjectMField belongs to, and non-proxied MObjects may never be interacted with except through 'this'.\n\t * So in order to ensure proper inverse relations, and MObjectMField must have a proxied reference to the object\n\t * that it belongs to. Setting the proxy must be done by the factory function.\n\t *\n\t * @param {Proxy} proxy - The proxy wrapped around this MObject\n\t * @throws {TypeError} The given proxy must be the proxy wrapped around this, otherwise an error is thrown\n\t */\n\tsetThisProxy(proxy) {\n\t\tif(!proxy === this) {\n\t\t\tthrow new TypeError(\"the given proxy must be this object's proxy!\")\n\t\t}\n\t\tthis.proxy = proxy;\n\t}\n\n\t/**\n\t * @return {String} A string representing the klass that this MObject implements\n\t */\n\tgetKlass() {\n\t\treturn this.schema.getKlass()\n\t}\n\n\t/**\n\t * @param {String, Symbol} propKey - The property key of the managed field that we want to access\n\t * @return {*} The value of the requested property, if it exists.\n\t * @throws {TypeError} An error is thrown if the field does not exist in this MObject's schema\n\t */\n\tget(propKey) {\n\t\tif(this.schema.hasFieldSchema(propKey)) {\n\t\t\treturn this.data[propKey].getValue();\n\t\t} else {\n\t\t\tthrow new TypeError(\"property \"+propKey+\" is not defined in schema\");\n\t\t}\n\t}\n\n\t/**\n\t * @param {String, Symbol} propKey - The property key of the managed field that we want to access\n\t * @param {*} value - The value that we want to set the managed field to\n\t *\n\t * @return {Boolean} True if setting was succesfull\n\t */\n\tset(propKey, value) {\n\t\tif(this.schema.hasFieldSchema(propKey)) {\n\t\t\tthis.data[propKey].setValue(value);\n\t\t\treturn true\n\t\t} else {\n\t\t\tthrow new TypeError(\"property \"+propKey+\" is not defined in schema\");\n\t\t}\n\t}\n\n\t/**\n\t * @param {Symbol, String} propKey - The property key of the field that we want to get the type of\n\t *\n\t * @return {String} The type of the field stored in data[propKey]\n\t */\n\tgetType(propKey) {\n\t\treturn this.schema.getFieldType(propKey)\n\t}\n\n\t/**\n\t * Methods invoked on managed array fields cannot be trapped by this MObjects proxy.\n\t * Therefore the array invokes the notifyArray callback when one of it's methods are invoked.\n\t * This allows the managed object and possible mixins to perform reflective behaviour on arrays, \n\t * as wel as regular data.\n\t * \n\t * @param {String} method - A string used to access the invoked method on the array that invoked this methid\n\t * @param {Array} args - An array containing the arguments given to the method \n\t * @param {ArrayMField} array - The array that was modified\n\t * \n\t * @return {Array} The arguments given to notifyArray. Mixins can override this method \n\t * to intercept and possibly modify the arguments.\n\t */\n\tnotifyArray(method, args, array) {\n\t\treturn args\n\t}\n\n\t/**\n\t * @return {String} A string representing the managed object\n\t */\n\ttoString() {\n\t\treturn \"[managedObject \"+this.schema.getKlass()+\"]\"\n\t}\n\n\t/**\n\t * @return {String} A string representing the managed object\n\t */\n\ttoJSON() {\n\t\treturn this.toString()\n\t}\n\n\t/**\n\t * @return {String} A strinng representing the managed object\n\t */\n\t[Symbol.toPrimitive]() {\n\t\treturn this.toString()\n\t}\n\n\t/**\n\t * @return {Object} An interable instance of this object\n\t */\n\t[Symbol.iterator]() {\n\t\tlet data = {};\n\t\tfor(let propKey in this.data) {\n\t\t\tdata[propKey] = this.data[propKey].getValue()\n\t\t}\n\t\treturn data[Symbol.iterator]()\n\t}\n}",
    "static": true,
    "longname": "/home/gebruiker/Documenten/BSc/code/ManagedDataJS/src/js/framework/dataManager/MObject.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 64,
    "kind": "class",
    "name": "MObjectHandler",
    "memberof": "framework/dataManager/MObject.js",
    "static": true,
    "longname": "framework/dataManager/MObject.js~MObjectHandler",
    "access": "public",
    "export": true,
    "importPath": "ManagedDataJS/framework/dataManager/MObject.js",
    "importStyle": "{MObjectHandler}",
    "description": "MObjectHandler provides a get and a set trap for the proxy that is wrapped around a\nmanaged object. The set trap simply invokes our custom set() function on the MObject.\nget first checks whether the requested property in the object is a function. If it is\nwe execute that function. Otherwise, the requested property key is forwarded to our custom\nget() function in the MObject",
    "lineNumber": 10,
    "interface": false
  },
  {
    "__docId__": 65,
    "kind": "method",
    "name": "get",
    "memberof": "framework/dataManager/MObject.js~MObjectHandler",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "framework/dataManager/MObject.js~MObjectHandler#get",
    "access": "public",
    "description": "",
    "lineNumber": 18,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "target",
        "description": "The target object."
      },
      {
        "nullable": null,
        "types": [
          "String, Symbol"
        ],
        "spread": false,
        "optional": false,
        "name": "propKey",
        "description": "The name of the property to get."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "receiver",
        "description": "Either the proxy or an object that inherits from the proxy."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "Either the value of the requested property or a function that executes the requested property"
    }
  },
  {
    "__docId__": 66,
    "kind": "method",
    "name": "set",
    "memberof": "framework/dataManager/MObject.js~MObjectHandler",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "framework/dataManager/MObject.js~MObjectHandler#set",
    "access": "public",
    "description": "",
    "lineNumber": 42,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "target",
        "description": "The target object."
      },
      {
        "nullable": null,
        "types": [
          "String, Symbol"
        ],
        "spread": false,
        "optional": false,
        "name": "propKey",
        "description": "The name of the property to set."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "The value to set the property to"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "receiver",
        "description": "Either the proxy or an object that inherits from the proxy."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": "true if setting the value was succesful. If setting the value failed an \nexception is thrown ny the managed object"
    }
  },
  {
    "__docId__": 67,
    "kind": "class",
    "name": "MObject",
    "memberof": "framework/dataManager/MObject.js",
    "static": true,
    "longname": "framework/dataManager/MObject.js~MObject",
    "access": "public",
    "export": true,
    "importPath": "ManagedDataJS/framework/dataManager/MObject.js",
    "importStyle": "{MObject}",
    "description": "MObject implements the basic functionality for managed data:\n\nIt provides a set() and get() method for managed fields that will be invoked by the proxy\nwrapped around this object. Managed fields are stored in the 'data' property of an MObject.\n\nFurthermore, it provides a notifyArrayChanged() callback that will be invoekd whenever an\nArrayMField changes its state.",
    "lineNumber": 58,
    "interface": false
  },
  {
    "__docId__": 68,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "framework/dataManager/MObject.js~MObject",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "framework/dataManager/MObject.js~MObject#constructor",
    "access": "public",
    "description": "Constructor function for a managed object",
    "lineNumber": 65,
    "params": [
      {
        "nullable": null,
        "types": [
          "KlassSchema"
        ],
        "spread": false,
        "optional": false,
        "name": "schema",
        "description": "A KlassSchema describing the data property of this managed object"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "klass",
        "description": "A string representing the klass name of tihs managed object"
      }
    ]
  },
  {
    "__docId__": 69,
    "kind": "member",
    "name": "data",
    "memberof": "framework/dataManager/MObject.js~MObject",
    "static": false,
    "longname": "framework/dataManager/MObject.js~MObject#data",
    "access": "public",
    "description": "",
    "lineNumber": 69,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 70,
    "kind": "member",
    "name": "proxy",
    "memberof": "framework/dataManager/MObject.js~MObject",
    "static": false,
    "longname": "framework/dataManager/MObject.js~MObject#proxy",
    "access": "public",
    "description": "this.proxy may only contain a pointer to the proxy wrapped around this instance of MObject",
    "lineNumber": 74,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 71,
    "kind": "member",
    "name": "schema",
    "memberof": "framework/dataManager/MObject.js~MObject",
    "static": false,
    "longname": "framework/dataManager/MObject.js~MObject#schema",
    "access": "public",
    "description": "",
    "lineNumber": 79,
    "type": {
      "nullable": null,
      "types": [
        "KlassSchema"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 72,
    "kind": "method",
    "name": "init",
    "memberof": "framework/dataManager/MObject.js~MObject",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "framework/dataManager/MObject.js~MObject#init",
    "access": "public",
    "description": "Init function that initializes the data property with managed fields and sets an initial\nvalue if this was provided in the inits parameter",
    "lineNumber": 88,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "inits",
        "description": "An object containing the initial values for this MObject"
      }
    ],
    "return": null
  },
  {
    "__docId__": 73,
    "kind": "method",
    "name": "setThisProxy",
    "memberof": "framework/dataManager/MObject.js~MObject",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "framework/dataManager/MObject.js~MObject#setThisProxy",
    "access": "public",
    "description": "A MObject needs to know its own proxy, since we need to pass a proxied reference of the MObject \nthat an MObjectMField belongs to, and non-proxied MObjects may never be interacted with except through 'this'.\nSo in order to ensure proper inverse relations, and MObjectMField must have a proxied reference to the object\nthat it belongs to. Setting the proxy must be done by the factory function.",
    "lineNumber": 112,
    "params": [
      {
        "nullable": null,
        "types": [
          "Proxy"
        ],
        "spread": false,
        "optional": false,
        "name": "proxy",
        "description": "The proxy wrapped around this MObject"
      }
    ],
    "throws": [
      {
        "types": [
          "TypeError"
        ],
        "description": "The given proxy must be the proxy wrapped around this, otherwise an error is thrown"
      }
    ],
    "return": null
  },
  {
    "__docId__": 75,
    "kind": "method",
    "name": "getKlass",
    "memberof": "framework/dataManager/MObject.js~MObject",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "framework/dataManager/MObject.js~MObject#getKlass",
    "access": "public",
    "description": "",
    "lineNumber": 122,
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "A string representing the klass that this MObject implements"
    },
    "params": []
  },
  {
    "__docId__": 76,
    "kind": "method",
    "name": "get",
    "memberof": "framework/dataManager/MObject.js~MObject",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "framework/dataManager/MObject.js~MObject#get",
    "access": "public",
    "description": "",
    "lineNumber": 131,
    "params": [
      {
        "nullable": null,
        "types": [
          "String, Symbol"
        ],
        "spread": false,
        "optional": false,
        "name": "propKey",
        "description": "The property key of the managed field that we want to access"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "The value of the requested property, if it exists."
    },
    "throws": [
      {
        "types": [
          "TypeError"
        ],
        "description": "An error is thrown if the field does not exist in this MObject's schema"
      }
    ]
  },
  {
    "__docId__": 77,
    "kind": "method",
    "name": "set",
    "memberof": "framework/dataManager/MObject.js~MObject",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "framework/dataManager/MObject.js~MObject#set",
    "access": "public",
    "description": "",
    "lineNumber": 145,
    "params": [
      {
        "nullable": null,
        "types": [
          "String, Symbol"
        ],
        "spread": false,
        "optional": false,
        "name": "propKey",
        "description": "The property key of the managed field that we want to access"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "The value that we want to set the managed field to"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": "True if setting was succesfull"
    }
  },
  {
    "__docId__": 78,
    "kind": "method",
    "name": "getType",
    "memberof": "framework/dataManager/MObject.js~MObject",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "framework/dataManager/MObject.js~MObject#getType",
    "access": "public",
    "description": "",
    "lineNumber": 159,
    "params": [
      {
        "nullable": null,
        "types": [
          "Symbol, String"
        ],
        "spread": false,
        "optional": false,
        "name": "propKey",
        "description": "The property key of the field that we want to get the type of"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "The type of the field stored in data[propKey]"
    }
  },
  {
    "__docId__": 79,
    "kind": "method",
    "name": "notifyArray",
    "memberof": "framework/dataManager/MObject.js~MObject",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "framework/dataManager/MObject.js~MObject#notifyArray",
    "access": "public",
    "description": "Methods invoked on managed array fields cannot be trapped by this MObjects proxy.\nTherefore the array invokes the notifyArray callback when one of it's methods are invoked.\nThis allows the managed object and possible mixins to perform reflective behaviour on arrays, \nas wel as regular data.",
    "lineNumber": 176,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "method",
        "description": "A string used to access the invoked method on the array that invoked this methid"
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "args",
        "description": "An array containing the arguments given to the method"
      },
      {
        "nullable": null,
        "types": [
          "ArrayMField"
        ],
        "spread": false,
        "optional": false,
        "name": "array",
        "description": "The array that was modified"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": "The arguments given to notifyArray. Mixins can override this method \nto intercept and possibly modify the arguments."
    }
  },
  {
    "__docId__": 80,
    "kind": "method",
    "name": "toString",
    "memberof": "framework/dataManager/MObject.js~MObject",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "framework/dataManager/MObject.js~MObject#toString",
    "access": "public",
    "description": "",
    "lineNumber": 183,
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "A string representing the managed object"
    },
    "params": []
  },
  {
    "__docId__": 81,
    "kind": "method",
    "name": "toJSON",
    "memberof": "framework/dataManager/MObject.js~MObject",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "framework/dataManager/MObject.js~MObject#toJSON",
    "access": "public",
    "description": "",
    "lineNumber": 190,
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "A string representing the managed object"
    },
    "params": []
  },
  {
    "__docId__": 82,
    "kind": "method",
    "name": "[Symbol.toPrimitive]",
    "memberof": "framework/dataManager/MObject.js~MObject",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "framework/dataManager/MObject.js~MObject#[Symbol.toPrimitive]",
    "access": "public",
    "description": "",
    "lineNumber": 197,
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "A strinng representing the managed object"
    },
    "params": []
  },
  {
    "__docId__": 83,
    "kind": "method",
    "name": "[Symbol.iterator]",
    "memberof": "framework/dataManager/MObject.js~MObject",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "framework/dataManager/MObject.js~MObject#[Symbol.iterator]",
    "access": "public",
    "description": "",
    "lineNumber": 204,
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "An interable instance of this object"
    },
    "params": []
  },
  {
    "__docId__": 84,
    "kind": "file",
    "name": "framework/dataManager/Schema.js",
    "content": "/**\n * A Klass is a wrapper around a parsed JSON schema that contains schemas for all fields of this klass\n */\nexport class KlassSchema {\n\t/**\n\t * A simple constructor that initializes fields and fieldTypes\n\t */\n\tconstructor(klass) {\n\t\t/**\n\t\t * @param {String} A string representing this klass's type\n\t\t */\n\t\tthis.klass = klass\n\n\t\t/**\n\t\t * @type {Object} An object that maps a key to a field schema\n\t\t */\n\t\tthis.fields = {}\n\n\t\t/**\n\t\t * @type{Object} an object that maps a key to a string representing the fields type\n\t\t */\n\t\tthis.fieldTypes = {}\n\t}\n\n\t/**\n\t * @param {String} propKey - The key of the field that we want to set the schema for\n\t * @param {Object} field - A parsed JSON schema representing a single property\n\t * @param {String} type - The type of the field that we want to set\n\t */\n\taddFieldSchema(propKey, field, type) {\n\t\tthis.fields[propKey] = field\n\t\tthis.fieldTypes[propKey] = type\n\t}\n\n\t/**\n\t * @param {String} propKey - The key of the field that we want to retrieve the schema of\n\t * @return {Object} - A parsed JSON schema representing the requested property\n\t * @throws {TypeError} - An error is thrown if the requested field does not exist\n\t */\n\tgetFieldSchema(propKey) {\n\t\tif(this.fields.hasOwnProperty(propKey)) {\n\t\t\treturn this.fields[propKey]\n\t\t} else {\n\t\t\tthrow new TypeError(propKey + \" is not defined in schema\")\n\t\t}\n\t}\n\n\t/**\n\t * @param {String} propKey - The key of the field that we want to retrieve the schema of\n\t * @return {Boolean} - True if the field exists, false otherwise\n\t */\n\thasFieldSchema(propKey) {\n\t\tif(this.fields.hasOwnProperty(propKey)) {\n\t\t\treturn true\n\t\t} else {\n\t\t\treturn false\n\t\t}\n\t}\n\n\t/**\n\t * @param {String} propKey - The key of the field that we want to retrieve the type of\n\t * @return {String} - the type of the requested field\n\t * @throws {TypeError} - An error is thrown if the requested field does not exist\n\t */\n\tgetFieldType(propKey) {\n\t\tif(this.fields.hasOwnProperty(propKey)) {\n\t\t\treturn this.fieldTypes[propKey]\n\t\t} else {\n\t\t\tthrow new TypeError(propKey + \" is not defined in schema\")\n\t\t}\n\t}\n\n\t/**\n\t * @return {String} A string representing this klass's type\n\t */\n\tgetKlass() {\n\t\treturn this.klass\n\t}\n}\n\n/**\n * Schema is a wrapper that provides an addKlass and a getKlassByName method. These methods are used to manage an\n * object that maps klass names to KlassSchemas. it's purpose is to group multiple KlassSchemas into a single Schema\n */\nexport class Schema {\n\t/**\n\t * A simple constructor that initializes the internal klasses property\n\t */\n\tconstructor() {\n\t\t/**\n\t\t * @type {Object} An object that maps klass names to Klass instances\n\t\t */\n\t\tthis.klasses = {}\n\t}\n\n\t/**\n\t * @param {String} klassName - A string representing the klass name that we want to add\n\t * @param {Klass} klass - The klass that we want to add\n\t */\n\taddKlass(klassName, klass) {\n\t\tthis.klasses[klassName] = klass\n\t}\n\n\t/**\n\t * @param {String} klassName - The klass that we want to retrieve\n\t * @return {Klass} The klass corresponding with the given klassName\n\t * @throws {TypeError} An error is thrown when the given klassName does not exist\n\t */ \n\tgetKlassByName(klassName) {\n\t\tif(this.klasses.hasOwnProperty(klassName)) {\n\t\t\treturn this.klasses[klassName]\n\t\t} else {\n\t\t\tthrow new TypeError(\"unknown klass: \" + klassName)\n\t\t}\n\t}\n}\n\n/**\n * @param {Object} schema - A JSON schema\n * @return {Schema} A parsed JSON schema\n */\nexport function parseSchema(schema) {\n\t/* Verify that the schema contains the required 'name' and 'properties' property */\n\tif(!schema.hasOwnProperty(\"name\")) {\n\t\tthrow new TypeError(\"A schema must have a 'name' property\")\n\t}\n\n\tif(!schema.hasOwnProperty(\"properties\")) {\n\t\tthrow new TypeError(\"A schema must have 'properties'\")\n\t}\n\n\t/* Create a new instance of Schema */\n\tlet parsedSchema = new Schema()\n\n\t/* Initialize paths: an object that maps a definition path to a klass name. \n\t * the path '#' refers to the main schema.\n\t * paths of the form '#/definitions/<klassName>' refers to a definition */\n\tlet paths = {}\n\tpaths[\"#\"] = schema.name\n\n\tlet hasDefinitions = false\n\t/* Parse definitions if there are any */\n\tif(schema.hasOwnProperty(\"definitions\")) {\n\t\tfor(let definition in schema.definitions) {\n\t\t\tparseDefinitions(schema.definitions, parsedSchema, paths)\n\t\t}\n\t}\n\n\t/* Parse the mainKlass */\n\tlet mainKlass = parseKlass(schema, schema.name, paths)\n\tparsedSchema.addKlass(schema.name, mainKlass)\n\n\tparseRelations(schema, parsedSchema, paths)\n\n\treturn parsedSchema\n}\n\n/**\n * @param {Object} definitions - A 'definitions' object from a JSON schema\n * @param {Schema} schema - A Schema where parseDefinitions can store parsed klasses\n * @param {Object} paths - An object that maps schema paths to the corresponding klass name\n */\nfunction parseDefinitions(definitions, schema, paths) {\n\t/* For each definition: map the path of that definition to the definition (klassName) */\n\tfor(let definition in definitions) {\n\t\tpaths[\"#/definitions/\" + definition] = definition\n\t}\n\n\t/* For each definition: parse the klass that it describes and add it to the schema */\n\tfor(let definition in definitions) {\n\t\tlet klass = parseKlass(definitions[definition], definition, paths) \n\t\tschema.addKlass(definition, klass)\n\t}\n}\n\n/**\n * @param {Object} klassSchema - A JSON schema describing the klass\n * @param {String} klassName - The name of this klass\n * @param {Object} paths - An object that maps schema paths to the corresponding klass name\n * @return {Klass} A parsed klass\n */\nfunction parseKlass(klassSchema, klassName, paths) {\n\t/* Create a new empty Klass */\n\tlet klass = new KlassSchema(klassName)\n\n\t/* For each property: parse the property and add it to the Klass */\n\tfor(let property in klassSchema.properties) {\n\t\tlet prop = klassSchema.properties[property]\n\t\tlet type = getType(prop)\n\n\t\tklass.addFieldSchema(property, parseProperty(prop, type, paths), type)\n\t}\n\n\treturn klass\n}\n\n/**\n * @param {Object} schema - A complete (raw) JSON schema\n * @param {Schema} parsedSchema - A Schema object that contains the parsed Klasses to which relations must be added\n * @param {Object} paths - An object that maps a path of the form \"#\" or \"#/definitions/<klassName>\" to the corresponding klassName\n */\nfunction parseRelations(schema, parsedSchema, paths) {\n\t/* parse relations for the main klass */\n\tif(schema.hasOwnProperty(\"relations\")) {\n\t\tfor(let relation in schema.relations) {\n\t\t\tparseRelation(relation, schema.relations[relation], parsedSchema, schema.name, paths)\n\t\t}\n\t}\n\n\t/* parse relations for all other classes defined in \"definitions\" */\n\tif(schema.hasOwnProperty(\"definitions\")) {\n\t\tfor(let definition in schema.definitions) {\t\n\t\t\tif(schema.definitions[definition].hasOwnProperty(\"relations\")) {\n\t\t\t\tfor(let relation in schema.definitions[definition].relations) {\n\t\t\t\t\tparseRelation(relation, schema.definitions[definition].relations[relation], parsedSchema, definition, paths)\n\t\t\t\t}\n\t\t\t}\t\n\t\t}\n\t}\n}\n\n/**\n * @param {String} relationType - String describing the type of relation. One of [\"oneToOne\", \"oneToMany\", \"manyToMany\"]\n * @param {Object} relations - A raw JSON schema for relations.\n * @param {parsedSchema} Schema - An instance of Schema that already contains all basic klass definitions.\n * @param {String} klassName - A string describing the name of the klass that these relations belong to.\n * @param {Object} paths - A javascript object that maps schema paths to klass names.\n * @throws {TypeError} When an invalid relation keyword is found in the schema, an error is thrown.\n */\nfunction parseRelation(relationType, relations, parsedSchema, klassName, paths) {\n\tlet fieldsList = []\n\tlet inversesList = []\n\tswitch(relationType) {\n\t\tcase \"oneToOne\": {\n\t\t\tfor(let relation of relations) {\n\t\t\t\tlet {field, inverses} = buildOneToOne(relation, klassName, paths)\n\t\t\t\tfieldsList.push(field)\n\t\t\t\tinversesList.push(inverses)\n\t\t\t}\n\t\t\tbreak;\n\t\t}\n\t\tcase \"oneToMany\": {\n\t\t\tfor(let relation of relations) {\n\t\t\t\tlet {field, inverses} = buildOneToMany(relation, klassName, paths)\n\t\t\t\tfieldsList.push(field)\n\t\t\t\tinversesList.push(inverses)\n\t\t\t}\n\t\t\tbreak;\n\t\t}\n\t\tcase \"manyToMany\": {\n\t\t\tfor(let relation of relations) {\n\t\t\t\tlet {field, inverses} = buildManyToMany(relation, klassName, paths)\n\t\t\t\tfieldsList.push(field)\n\t\t\t\tinversesList.push(inverses)\n\t\t\t}\n\t\t\tbreak;\n\t\t}\n\t\tdefault: {\n\t\t\tthrow new TypeError(relationType + \"is not a valid relation type. Please use one of [oneToOne, oneToMany, manyToMany]\")\n\t\t}\n\t}\n\tfor(let field of fieldsList) {\n\t\tparsedSchema.klasses[klassName].addFieldSchema(field.key, field.schema, field.type)\n\t}\n\n\tfor(let inverses of inversesList) {\n\t\tfor(let inverseKlass in inverses) {\n\t\t\tparsedSchema.klasses[inverseKlass].addFieldSchema(inverses[inverseKlass].key, inverses[inverseKlass].schema, inverses[inverseKlass].type)\n\t\t}\n\t}\n}\n\n/**\n * @param {Object} schema - A raw JSON schema describing a relation\n * @param {Object} paths - A javascript object that maps schema paths to klass names\n * @Throws {TypeError} A TypeError is thrown when the schema contains an incorrect reference\n */\nfunction validateRelationSchema(schema, paths) {\n\tif(schema.hasOwnProperty(\"$ref\")) {\n\t\tif(!paths.hasOwnProperty(schema[\"$ref\"])) {\n\t\t\tthrow new TypeError(schema[\"$ref\"] + \" is not a valid schema reference\")\n\t\t}\n\t} else if (schema.hasOwnProperty(\"oneOf\")) {\n\t\tfor(let item of schema.oneOf) {\n\t\t\tif(item.hasOwnProperty(\"$ref\")) {\n\t\t\t\tif(!paths.hasOwnProperty(item[\"$ref\"])) {\n\t\t\t\t\tthrow new TypeError(item[\"$ref\"] + \" is not a valid schema reference\")\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthrow new TypeError(\"An item in 'oneOf' must have a '$ref' keyword referencing a schema\")\n\t\t\t}\n\t\t}\n\t}\n}\n\n/**\n * @param {Object} relation - A single schema describing a relation\n * @param {String} klassName - The klass that this relation belongs to\n * @param {Object} paths - A javascript object that maps schema paths to klass names\n * @return {Object, Object} - buildOneToOne creates the fields required for a one to \n * one relation. The first object is the field for the klass initiating the relation.\n * The second object contains an inverse field for each other klass involved in the relation.\n */\nfunction buildOneToOne(relation, klassName, paths) {\n\tvalidateRelationSchema(relation, paths)\n\n\tlet field = {}\n\tlet inverses = {}\n\tif(relation.hasOwnProperty(\"$ref\")) {\n\t\tlet relatedKlass = paths[relation[\"$ref\"]]\n\t\tfield.schema = buildObjectField(relatedKlass, relation.referred, \"object\")\n\t\tfield.key = relation.referrer\n\t\tfield.type = \"object\"\n\n\t\tinverses[relatedKlass] = {}\n\t\tinverses[relatedKlass].schema = buildObjectField(klassName, relation.referrer, \"object\")\n\t\tinverses[relatedKlass].type = \"object\"\n\t\tinverses[relatedKlass].key = relation.referred\n\t} else if (relation.hasOwnProperty(\"oneOf\")) {\n\t\tfield = {}\n\t\tfield.type=\"oneOf\"\n\t\tfield.key=relation.referrer\n\t\tfield.schema = {\n\t\t\t\"oneOf\": []\n\t\t}\n\t\tfor(let item of relation.oneOf) {\n\t\t\tlet relatedKlass = paths[item[\"$ref\"]]\n\t\t\tfield.schema.oneOf.push(buildObjectField(relatedKlass, relation.referred, \"object\"))\n\t\t\t\n\t\t\tinverses[relatedKlass] = {}\n\t\t\tinverses[relatedKlass].type = \"object\"\n\t\t\tinverses[relatedKlass].key = relation.referred\n\t\t\tinverses[relatedKlass].schema = buildObjectField(relatedKlass, relation.referrer, \"object\")\n\t\t}\n\t}\n\n\treturn {field, inverses}\n}\n\n/**\n * @param {Object} relation - A single schema describing a relation\n * @param {String} klassName - The klass that this relation belongs to\n * @param {Object} paths - A javascript object that maps schema paths to klass names\n * @return {Object, Object} - buildOneToMany creates the fields required for a one to \n * many relation. The first object is the field for the klass initiating the relation.\n * The second object contains an inverse field for each other klass involved in the relation.\n */\nfunction buildOneToMany(relation, klassName, paths) {\n\tvalidateRelationSchema(relation, paths)\n\n\tlet field = {}\n\tlet inverses = {}\n\tif(relation.hasOwnProperty(\"$ref\")) {\n\t\tlet relatedKlass = paths[relation[\"$ref\"]]\n\t\tfield.schema = buildArrayField(relation.referred, {\"type\": \"object\", \"klass\": relatedKlass}, \"object\")\n\t\tfield.key = relation.referrer\n\t\tfield.type = \"array\"\n\n\t\tinverses[relatedKlass] = {}\n\t\tinverses[relatedKlass].schema = buildObjectField(klassName, relation.referrer, \"array\")\n\t\tinverses[relatedKlass].type = \"object\"\n\t\tinverses[relatedKlass].key = relation.referred\n\t} else if (relation.hasOwnProperty(\"oneOf\")) {\n\t\tfield = {}\n\t\tfield.type=\"array\"\n\t\tfield.key = relation.referrer\n\n\t\tlet items = {\n\t\t\t\"oneOf\": []\n\t\t}\n\n\t\tfor(let item of relation.oneOf) {\n\t\t\tlet relatedKlass = paths[item[\"$ref\"]]\n\t\t\titems.oneOf.push({\"type\": \"object\", \"klass\": relatedKlass})\n\t\t\t\n\t\t\tinverses[relatedKlass] = {}\n\t\t\tinverses[relatedKlass].type = \"object\"\n\t\t\tinverses[relatedKlass].key = relation.referred\n\t\t\tinverses[relatedKlass].schema = buildObjectField(klassName, relation.referrer, \"array\")\n\t\t}\n\n\t\tfield.schema = buildArrayField(relation.referred, items, \"object\")\n\t}\n\n\treturn {field, inverses}\n}\n\n/**\n * @param {Object} relation - A single schema describing a relation\n * @param {String} klassName - The klass that this relation belongs to\n * @param {Object} paths - A javascript object that maps schema paths to klass names\n * @return {Object, Object} - buildManyToMany creates the fields required for a many to \n * many relation. The first object is the field for the klass initiating the relation.\n * The second object contains an inverse field for each other klass involved in the relation.\n */\nfunction buildManyToMany(relation, klassName, paths) {\n\tvalidateRelationSchema(relation, paths)\n\n\tlet field = {}\n\tlet inverses = {}\n\tif(relation.hasOwnProperty(\"$ref\")) {\n\t\tlet relatedKlass = paths[relation[\"$ref\"]]\n\t\tfield.schema = buildArrayField(relation.referred, {type: \"object\", klass: relatedKlass}, \"array\")\n\t\tfield.key = relation.referrer\n\t\tfield.type = \"array\"\n\n\t\tinverses[relatedKlass] = {}\n\t\tinverses[relatedKlass].schema = buildArrayField(relation.referrer, {type: \"object\", klass: klassName}, \"array\")\n\t\tinverses[relatedKlass].type = \"array\"\n\t\tinverses[relatedKlass].key = relation.referred\n\t} else if (relation.hasOwnProperty(\"oneOf\")) {\n\t\tfield = {}\n\t\tfield.type=\"array\"\n\t\tfield.key = relation.referrer\n\n\t\tlet items = {\n\t\t\t\"oneOf\": []\n\t\t}\n\n\t\tfor(let item of relation.oneOf) {\n\t\t\tlet relatedKlass = paths[item[\"$ref\"]]\n\t\t\titems.oneOf.push({\"type\": \"object\", \"klass\": relatedKlass})\n\t\t\t\n\t\t\tinverses[relatedKlass] = {}\n\t\t\tinverses[relatedKlass].type = \"array\"\n\t\t\tinverses[relatedKlass].key = relation.referred\n\t\t\tinverses[relatedKlass].schema = buildArrayField(relation.referrer, {type: \"object\", \"klass\": klassName}, \"array\")\n\t\t}\n\n\t\tfield.schema = buildArrayField(relation.referred, items, \"array\")\n\t}\n\n\treturn {field, inverses}\n}\n\n/**\n * @param {String} inverseKey - The property key used to access the inverse field in this fields value\n * @param {Array} items - An object containing the schema for the item that this array field holds.\n * @param {String} inverseType - A string, either \"object\" or \"array\". Used to identify the type of the inverse field\n * @return {Object} A regular javascript object that describes the schema for the created field\n */\nfunction buildArrayField(inverseKey, items, inverseType) {\n\treturn {\n\t\t\"type\": \"array\",\n\t\t\"items\": items,\n\t\t\"inverseKey\": inverseKey,\n\t\t\"inverseType\": inverseType\n\n\t}\n}\n\n/**\n * @param {String} klass - A string representing the klass that this object field must hold\n * @param {String} inverseKey - The property key used to access the inverse field in this fields value\n * @param {String} inverseType - A string, either \"object\" or \"array\". Used to identify the type of the inverse field\n * @return {Object} A regular javascript object that describes the schema for the created field\n */\nfunction buildObjectField(klass, inverseKey, inverseType) {\n\treturn {\n\t\t\"type\": \"object\",\n\t\t\"klass\": klass,\n\t\t\"inverseKey\": inverseKey,\n\t\t\"inverseType\": inverseType\n\t}\n}\n\n/**\n * @param {Object} property - A JSON schema describing a single property\n * @param {String} type - The type of the property\n * @param {Object} paths - An object that maps schema paths to the corresponding klass name\n * @return {Object} A parsed property\n * @throws {TypeError} - If the schema contains an invalid keyword then an error is thrown\n */\nfunction parseProperty(property, type, paths) {\n\t/* Shallow copy the given property to a new object so we don't modify the existing schema */\n\tlet newProp = { ...property }\n\n\tswitch(type) {\n\t\tcase \"object\": {\n\t\t\t/* An object must have a reference */\n\t\t\tif(newProp.hasOwnProperty(\"$ref\")) {\n\t\t\t\t/* Replace the '$ref' keyword by a klass */\n\t\t\t\tnewProp[\"klass\"] = paths[newProp[\"$ref\"]]\n\t\t\t\tif(newProp.klass == undefined) {\n\t\t\t\t}\n\t\t\t\tdelete newProp[\"$ref\"]\n\t\t\t\t\n\t\t\t} else {\n\t\t\t\tthrow new TypeError(\"A property of type 'object' must have a '$ref' keyword that references the definition describing the object\")\n\t\t\t}\n\t\t\tbreak\n\t\t}\n\t\tcase \"array\": {\n\t\t\t/* An array must define items */\n\t\t\tif(newProp.hasOwnProperty(\"items\")) {\n\t\t\t\tif(newProp.items instanceof Array) {\n\t\t\t\t\t/* Parse each item in the array */\n\t\t\t\t\tnewProp.items = parseArray(newProp.items, paths)\n\t\t\t\t} else {\n\t\t\t\t\t/* Items is a single property so we parse the property */\n\t\t\t\t\tlet type = getType(newProp.items)\n\t\t\t\t\tnewProp.items = parseProperty(newProp.items, type, paths)\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthrow new TypeError(\"An array must define the type of its contained items in an 'items' keyword\")\n\t\t\t}\n\t\t\tbreak\n\t\t}\n\t\tcase \"oneOf\": {\n\t\t\t/* oneOf must be an array of types */\n\t\t\tif(newProp.oneOf instanceof Array) {\n\t\t\t\t/* Parse each item in the array */\n\t\t\t\tnewProp.oneOf = parseArray(newProp.oneOf, paths)\n\t\t\t} else {\n\t\t\t\tthrow new TypeError(\"The oneOf keyword must be an array of types\")\n\t\t\t}\n\t\t\tbreak\n\t\t}\n\t}\n\treturn newProp\n}\n\n/**\n * @param {Array} array - An array of JSON schema properties\n * @param {Object} paths - An object that maps schema paths to the corresponding klass name\n * @return {Array} An array containing the parsed properties\n */\nfunction parseArray(array, paths) {\n\tlet newArr = []\n\tfor(let item of array) {\n\t\t/* For each item: parse the item and add it to the new Array */\n\t\tlet type = getType(item)\n\t\tnewArr.push(parseProperty(item, type, paths))\n\t}\n\treturn newArr\n}\n\n/**\n * @param {Object} property - A JSON schema describing a single property\n * @return {String} The type of the given property\n */\nfunction getType(property) {\n\tif(property.hasOwnProperty(\"enum\")) {\n\t\treturn \"enum\"\n\t}\n\n\tif(property.hasOwnProperty(\"oneOf\")) {\n\t\treturn \"oneOf\"\n\t}\n\n\tif(property.hasOwnProperty(\"type\")) {\n\t\treturn property.type\n\t}\n}",
    "static": true,
    "longname": "/home/gebruiker/Documenten/BSc/code/ManagedDataJS/src/js/framework/dataManager/Schema.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 85,
    "kind": "class",
    "name": "KlassSchema",
    "memberof": "framework/dataManager/Schema.js",
    "static": true,
    "longname": "framework/dataManager/Schema.js~KlassSchema",
    "access": "public",
    "export": true,
    "importPath": "ManagedDataJS/framework/dataManager/Schema.js",
    "importStyle": "{KlassSchema}",
    "description": "A Klass is a wrapper around a parsed JSON schema that contains schemas for all fields of this klass",
    "lineNumber": 4,
    "interface": false
  },
  {
    "__docId__": 86,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "framework/dataManager/Schema.js~KlassSchema",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "framework/dataManager/Schema.js~KlassSchema#constructor",
    "access": "public",
    "description": "A simple constructor that initializes fields and fieldTypes",
    "lineNumber": 8
  },
  {
    "__docId__": 87,
    "kind": "member",
    "name": "klass",
    "memberof": "framework/dataManager/Schema.js~KlassSchema",
    "static": false,
    "longname": "framework/dataManager/Schema.js~KlassSchema#klass",
    "access": "public",
    "description": "",
    "lineNumber": 12,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "A",
        "description": "string representing this klass's type"
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 88,
    "kind": "member",
    "name": "fields",
    "memberof": "framework/dataManager/Schema.js~KlassSchema",
    "static": false,
    "longname": "framework/dataManager/Schema.js~KlassSchema#fields",
    "access": "public",
    "description": "",
    "lineNumber": 17,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 89,
    "kind": "member",
    "name": "fieldTypes",
    "memberof": "framework/dataManager/Schema.js~KlassSchema",
    "static": false,
    "longname": "framework/dataManager/Schema.js~KlassSchema#fieldTypes",
    "access": "public",
    "description": "@type{Object} an object that maps a key to a string representing the fields type",
    "lineNumber": 22,
    "type": {
      "types": [
        "{}"
      ]
    }
  },
  {
    "__docId__": 90,
    "kind": "method",
    "name": "addFieldSchema",
    "memberof": "framework/dataManager/Schema.js~KlassSchema",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "framework/dataManager/Schema.js~KlassSchema#addFieldSchema",
    "access": "public",
    "description": "",
    "lineNumber": 30,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "propKey",
        "description": "The key of the field that we want to set the schema for"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "field",
        "description": "A parsed JSON schema representing a single property"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "type",
        "description": "The type of the field that we want to set"
      }
    ],
    "return": null
  },
  {
    "__docId__": 91,
    "kind": "method",
    "name": "getFieldSchema",
    "memberof": "framework/dataManager/Schema.js~KlassSchema",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "framework/dataManager/Schema.js~KlassSchema#getFieldSchema",
    "access": "public",
    "description": "",
    "lineNumber": 40,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "propKey",
        "description": "The key of the field that we want to retrieve the schema of"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "A parsed JSON schema representing the requested property"
    },
    "throws": [
      {
        "types": [
          "TypeError"
        ],
        "description": "An error is thrown if the requested field does not exist"
      }
    ]
  },
  {
    "__docId__": 92,
    "kind": "method",
    "name": "hasFieldSchema",
    "memberof": "framework/dataManager/Schema.js~KlassSchema",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "framework/dataManager/Schema.js~KlassSchema#hasFieldSchema",
    "access": "public",
    "description": "",
    "lineNumber": 52,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "propKey",
        "description": "The key of the field that we want to retrieve the schema of"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": "True if the field exists, false otherwise"
    }
  },
  {
    "__docId__": 93,
    "kind": "method",
    "name": "getFieldType",
    "memberof": "framework/dataManager/Schema.js~KlassSchema",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "framework/dataManager/Schema.js~KlassSchema#getFieldType",
    "access": "public",
    "description": "",
    "lineNumber": 65,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "propKey",
        "description": "The key of the field that we want to retrieve the type of"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "the type of the requested field"
    },
    "throws": [
      {
        "types": [
          "TypeError"
        ],
        "description": "An error is thrown if the requested field does not exist"
      }
    ]
  },
  {
    "__docId__": 94,
    "kind": "method",
    "name": "getKlass",
    "memberof": "framework/dataManager/Schema.js~KlassSchema",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "framework/dataManager/Schema.js~KlassSchema#getKlass",
    "access": "public",
    "description": "",
    "lineNumber": 76,
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "A string representing this klass's type"
    },
    "params": []
  },
  {
    "__docId__": 95,
    "kind": "class",
    "name": "Schema",
    "memberof": "framework/dataManager/Schema.js",
    "static": true,
    "longname": "framework/dataManager/Schema.js~Schema",
    "access": "public",
    "export": true,
    "importPath": "ManagedDataJS/framework/dataManager/Schema.js",
    "importStyle": "{Schema}",
    "description": "Schema is a wrapper that provides an addKlass and a getKlassByName method. These methods are used to manage an\nobject that maps klass names to KlassSchemas. it's purpose is to group multiple KlassSchemas into a single Schema",
    "lineNumber": 85,
    "interface": false
  },
  {
    "__docId__": 96,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "framework/dataManager/Schema.js~Schema",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "framework/dataManager/Schema.js~Schema#constructor",
    "access": "public",
    "description": "A simple constructor that initializes the internal klasses property",
    "lineNumber": 89
  },
  {
    "__docId__": 97,
    "kind": "member",
    "name": "klasses",
    "memberof": "framework/dataManager/Schema.js~Schema",
    "static": false,
    "longname": "framework/dataManager/Schema.js~Schema#klasses",
    "access": "public",
    "description": "",
    "lineNumber": 93,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 98,
    "kind": "method",
    "name": "addKlass",
    "memberof": "framework/dataManager/Schema.js~Schema",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "framework/dataManager/Schema.js~Schema#addKlass",
    "access": "public",
    "description": "",
    "lineNumber": 100,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "klassName",
        "description": "A string representing the klass name that we want to add"
      },
      {
        "nullable": null,
        "types": [
          "Klass"
        ],
        "spread": false,
        "optional": false,
        "name": "klass",
        "description": "The klass that we want to add"
      }
    ],
    "return": null
  },
  {
    "__docId__": 99,
    "kind": "method",
    "name": "getKlassByName",
    "memberof": "framework/dataManager/Schema.js~Schema",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "framework/dataManager/Schema.js~Schema#getKlassByName",
    "access": "public",
    "description": "",
    "lineNumber": 109,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "klassName",
        "description": "The klass that we want to retrieve"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Klass"
      ],
      "spread": false,
      "description": "The klass corresponding with the given klassName"
    },
    "throws": [
      {
        "types": [
          "TypeError"
        ],
        "description": "An error is thrown when the given klassName does not exist"
      }
    ]
  },
  {
    "__docId__": 100,
    "kind": "function",
    "name": "parseSchema",
    "memberof": "framework/dataManager/Schema.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "framework/dataManager/Schema.js~parseSchema",
    "access": "public",
    "export": true,
    "importPath": "ManagedDataJS/framework/dataManager/Schema.js",
    "importStyle": "{parseSchema}",
    "description": "",
    "lineNumber": 122,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "schema",
        "description": "A JSON schema"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Schema"
      ],
      "spread": false,
      "description": "A parsed JSON schema"
    }
  },
  {
    "__docId__": 101,
    "kind": "function",
    "name": "parseDefinitions",
    "memberof": "framework/dataManager/Schema.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "framework/dataManager/Schema.js~parseDefinitions",
    "access": "public",
    "export": false,
    "importPath": "ManagedDataJS/framework/dataManager/Schema.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 163,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "definitions",
        "description": "A 'definitions' object from a JSON schema"
      },
      {
        "nullable": null,
        "types": [
          "Schema"
        ],
        "spread": false,
        "optional": false,
        "name": "schema",
        "description": "A Schema where parseDefinitions can store parsed klasses"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "paths",
        "description": "An object that maps schema paths to the corresponding klass name"
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 102,
    "kind": "function",
    "name": "parseKlass",
    "memberof": "framework/dataManager/Schema.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "framework/dataManager/Schema.js~parseKlass",
    "access": "public",
    "export": false,
    "importPath": "ManagedDataJS/framework/dataManager/Schema.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 182,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "klassSchema",
        "description": "A JSON schema describing the klass"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "klassName",
        "description": "The name of this klass"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "paths",
        "description": "An object that maps schema paths to the corresponding klass name"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Klass"
      ],
      "spread": false,
      "description": "A parsed klass"
    },
    "ignore": true
  },
  {
    "__docId__": 103,
    "kind": "function",
    "name": "parseRelations",
    "memberof": "framework/dataManager/Schema.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "framework/dataManager/Schema.js~parseRelations",
    "access": "public",
    "export": false,
    "importPath": "ManagedDataJS/framework/dataManager/Schema.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 202,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "schema",
        "description": "A complete (raw) JSON schema"
      },
      {
        "nullable": null,
        "types": [
          "Schema"
        ],
        "spread": false,
        "optional": false,
        "name": "parsedSchema",
        "description": "A Schema object that contains the parsed Klasses to which relations must be added"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "paths",
        "description": "An object that maps a path of the form \"#\" or \"#/definitions/<klassName>\" to the corresponding klassName"
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 104,
    "kind": "function",
    "name": "parseRelation",
    "memberof": "framework/dataManager/Schema.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "framework/dataManager/Schema.js~parseRelation",
    "access": "public",
    "export": false,
    "importPath": "ManagedDataJS/framework/dataManager/Schema.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 230,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "relationType",
        "description": "String describing the type of relation. One of [\"oneToOne\", \"oneToMany\", \"manyToMany\"]"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "relations",
        "description": "A raw JSON schema for relations."
      },
      {
        "nullable": null,
        "types": [
          "parsedSchema"
        ],
        "spread": false,
        "optional": false,
        "name": "Schema",
        "description": "An instance of Schema that already contains all basic klass definitions."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "klassName",
        "description": "A string describing the name of the klass that these relations belong to."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "paths",
        "description": "A javascript object that maps schema paths to klass names."
      }
    ],
    "throws": [
      {
        "types": [
          "TypeError"
        ],
        "description": "When an invalid relation keyword is found in the schema, an error is thrown."
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 105,
    "kind": "function",
    "name": "validateRelationSchema",
    "memberof": "framework/dataManager/Schema.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "framework/dataManager/Schema.js~validateRelationSchema",
    "access": "public",
    "export": false,
    "importPath": "ManagedDataJS/framework/dataManager/Schema.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 278,
    "unknown": [
      {
        "tagName": "@Throws",
        "tagValue": "{TypeError} A TypeError is thrown when the schema contains an incorrect reference"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "schema",
        "description": "A raw JSON schema describing a relation"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "paths",
        "description": "A javascript object that maps schema paths to klass names"
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 106,
    "kind": "function",
    "name": "buildOneToOne",
    "memberof": "framework/dataManager/Schema.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "framework/dataManager/Schema.js~buildOneToOne",
    "access": "public",
    "export": false,
    "importPath": "ManagedDataJS/framework/dataManager/Schema.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 304,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "relation",
        "description": "A single schema describing a relation"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "klassName",
        "description": "The klass that this relation belongs to"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "paths",
        "description": "A javascript object that maps schema paths to klass names"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object, Object"
      ],
      "spread": false,
      "description": "buildOneToOne creates the fields required for a one to \none relation. The first object is the field for the klass initiating the relation.\nThe second object contains an inverse field for each other klass involved in the relation."
    },
    "ignore": true
  },
  {
    "__docId__": 107,
    "kind": "function",
    "name": "buildOneToMany",
    "memberof": "framework/dataManager/Schema.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "framework/dataManager/Schema.js~buildOneToMany",
    "access": "public",
    "export": false,
    "importPath": "ManagedDataJS/framework/dataManager/Schema.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 348,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "relation",
        "description": "A single schema describing a relation"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "klassName",
        "description": "The klass that this relation belongs to"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "paths",
        "description": "A javascript object that maps schema paths to klass names"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object, Object"
      ],
      "spread": false,
      "description": "buildOneToMany creates the fields required for a one to \nmany relation. The first object is the field for the klass initiating the relation.\nThe second object contains an inverse field for each other klass involved in the relation."
    },
    "ignore": true
  },
  {
    "__docId__": 108,
    "kind": "function",
    "name": "buildManyToMany",
    "memberof": "framework/dataManager/Schema.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "framework/dataManager/Schema.js~buildManyToMany",
    "access": "public",
    "export": false,
    "importPath": "ManagedDataJS/framework/dataManager/Schema.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 396,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "relation",
        "description": "A single schema describing a relation"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "klassName",
        "description": "The klass that this relation belongs to"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "paths",
        "description": "A javascript object that maps schema paths to klass names"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object, Object"
      ],
      "spread": false,
      "description": "buildManyToMany creates the fields required for a many to \nmany relation. The first object is the field for the klass initiating the relation.\nThe second object contains an inverse field for each other klass involved in the relation."
    },
    "ignore": true
  },
  {
    "__docId__": 109,
    "kind": "function",
    "name": "buildArrayField",
    "memberof": "framework/dataManager/Schema.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "framework/dataManager/Schema.js~buildArrayField",
    "access": "public",
    "export": false,
    "importPath": "ManagedDataJS/framework/dataManager/Schema.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 442,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "inverseKey",
        "description": "The property key used to access the inverse field in this fields value"
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "items",
        "description": "An object containing the schema for the item that this array field holds."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "inverseType",
        "description": "A string, either \"object\" or \"array\". Used to identify the type of the inverse field"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "A regular javascript object that describes the schema for the created field"
    },
    "ignore": true
  },
  {
    "__docId__": 110,
    "kind": "function",
    "name": "buildObjectField",
    "memberof": "framework/dataManager/Schema.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "framework/dataManager/Schema.js~buildObjectField",
    "access": "public",
    "export": false,
    "importPath": "ManagedDataJS/framework/dataManager/Schema.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 458,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "klass",
        "description": "A string representing the klass that this object field must hold"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "inverseKey",
        "description": "The property key used to access the inverse field in this fields value"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "inverseType",
        "description": "A string, either \"object\" or \"array\". Used to identify the type of the inverse field"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "A regular javascript object that describes the schema for the created field"
    },
    "ignore": true
  },
  {
    "__docId__": 111,
    "kind": "function",
    "name": "parseProperty",
    "memberof": "framework/dataManager/Schema.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "framework/dataManager/Schema.js~parseProperty",
    "access": "public",
    "export": false,
    "importPath": "ManagedDataJS/framework/dataManager/Schema.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 474,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "property",
        "description": "A JSON schema describing a single property"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "type",
        "description": "The type of the property"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "paths",
        "description": "An object that maps schema paths to the corresponding klass name"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "A parsed property"
    },
    "throws": [
      {
        "types": [
          "TypeError"
        ],
        "description": "If the schema contains an invalid keyword then an error is thrown"
      }
    ],
    "ignore": true
  },
  {
    "__docId__": 112,
    "kind": "function",
    "name": "parseArray",
    "memberof": "framework/dataManager/Schema.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "framework/dataManager/Schema.js~parseArray",
    "access": "public",
    "export": false,
    "importPath": "ManagedDataJS/framework/dataManager/Schema.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 528,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "array",
        "description": "An array of JSON schema properties"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "paths",
        "description": "An object that maps schema paths to the corresponding klass name"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": "An array containing the parsed properties"
    },
    "ignore": true
  },
  {
    "__docId__": 113,
    "kind": "function",
    "name": "getType",
    "memberof": "framework/dataManager/Schema.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "framework/dataManager/Schema.js~getType",
    "access": "public",
    "export": false,
    "importPath": "ManagedDataJS/framework/dataManager/Schema.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 542,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "property",
        "description": "A JSON schema describing a single property"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "The type of the given property"
    },
    "ignore": true
  },
  {
    "__docId__": 114,
    "kind": "file",
    "name": "framework/dataManager/fields/MFieldFactory.js",
    "content": "import {IntegerMField, NumberMField, StringMField, BooleanMField, MObjectMField} from \"./MFieldSingle\"\nimport {ArrayHandler, ArrayMField, EnumMField, OneOfMField} from \"./MFieldMulti\"\n\n/**\n * MField is a factory function that returns one of the following managed fields\n * based on the given schema:\n * \t\tIntegerMField\n *\t\tNumberMField\n *\t\tStringMField\n *\t\tBooleanMField\n *\t\tMObjectMField\n *\t\tArrayMField\n *\t\tEnumMField\n *\t\tOneOfMField\n *\n * This function abstracts the MField implementation away from the user\n * as all outside functionality is provided by the base MField class\n * Note that there is one exception: The array MField, which has some additionional\n * Behaviour.\n *\n * @param {Object} schema - A (partial) JSON schema that describes the field that should be constructed\n * @param {MObject} superKlass - The MObject that this field belongs to\n *\n * @return {MField} An MField that ensures its value property matches the given schema\n */\nexport function MFieldFactory(schema, superKlass) {\n\tif(schema.hasOwnProperty(\"enum\")) {\n\t\treturn new EnumMField(schema)\n\t}\n\n\tif(schema.hasOwnProperty(\"oneOf\")) {\n\t\tconsole.log(\"building oneOf field\")\n\t\treturn new OneOfMField(schema, superKlass)\n\t}\n\n\tif(schema.hasOwnProperty(\"type\")) {\n\t\tswitch(schema.type) {\n\t\t\tcase \"integer\": {\n\t\t\t\treturn new IntegerMField(schema)\n\t\t\t\tbreak\n\t\t\t}\n\t\t\tcase \"number\": {\n\t\t\t\treturn new NumberMField(schema)\n\t\t\t\tbreak\n\t\t\t}\n\t\t\tcase \"string\": {\n\t\t\t\treturn new StringMField(schema)\n\t\t\t\tbreak\n\t\t\t}\n\t\t\tcase \"boolean\": {\n\t\t\t\treturn new BooleanMField(schema)\n\t\t\t\tbreak \n\t\t\t}\n\t\t\tcase \"object\": {\n\t\t\t\treturn new MObjectMField(schema, superKlass)\n\t\t\t\tbreak\n\t\t\t}\n\t\t\tcase \"array\": {\n\t\t\t\tlet array = new Proxy(new ArrayMField(schema, superKlass), new ArrayHandler())\n\t\t\t\tarray.setThisProxy(array)\n\t\t\t\treturn array\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t}\n}",
    "static": true,
    "longname": "/home/gebruiker/Documenten/BSc/code/ManagedDataJS/src/js/framework/dataManager/fields/MFieldFactory.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 115,
    "kind": "function",
    "name": "MFieldFactory",
    "memberof": "framework/dataManager/fields/MFieldFactory.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "framework/dataManager/fields/MFieldFactory.js~MFieldFactory",
    "access": "public",
    "export": true,
    "importPath": "ManagedDataJS/framework/dataManager/fields/MFieldFactory.js",
    "importStyle": "{MFieldFactory}",
    "description": "MField is a factory function that returns one of the following managed fields\nbased on the given schema:\n\t\tIntegerMField\n\tNumberMField\n\tStringMField\n\tBooleanMField\n\tMObjectMField\n\tArrayMField\n\tEnumMField\n\tOneOfMField\n\nThis function abstracts the MField implementation away from the user\nas all outside functionality is provided by the base MField class\nNote that there is one exception: The array MField, which has some additionional\nBehaviour.",
    "lineNumber": 26,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "schema",
        "description": "A (partial) JSON schema that describes the field that should be constructed"
      },
      {
        "nullable": null,
        "types": [
          "MObject"
        ],
        "spread": false,
        "optional": false,
        "name": "superKlass",
        "description": "The MObject that this field belongs to"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "MField"
      ],
      "spread": false,
      "description": "An MField that ensures its value property matches the given schema"
    }
  },
  {
    "__docId__": 116,
    "kind": "file",
    "name": "framework/dataManager/fields/MFieldMulti.js",
    "content": "import {MField} from \"./MFieldSingle\"\nimport {MFieldFactory} from \"./MFieldFactory\"\n\n/**\n * The ArrayHandler ensures that ArrayMfield[idx] returns ArrayMField.value[idx] when idx is an integer\n */\nexport class ArrayHandler {\n\t/**\n\t * @param {Object} target - The target object.\n\t * @param {String, Symbol} propKey - The name of the property to get.\n\t * @param {Object} receiver - Either the proxy or an object that inherits from the proxy.\n\t *\n\t * @return {*} Either the value stored at the requested index or the result of Reflect.get()\n\t */\n\tget(target, propKey, receiver) {\n\t\tif(!(typeof(propKey)==\"symbol\") && !isNaN(propKey)) {\n\t\t\ttarget.superKlass.notifyArray(\"get\", [propKey], target.proxy)\n\t\t\treturn target.get(parseInt(propKey))\n\t\t} else {\n\t\t\tlet propValue = target[propKey]\n\t\t\tif(typeof(propValue) == \"function\" && !(typeof(propKey) == \"symbol\")) {\n\t\t\t\treturn function() {\n\t\t\t\t\tlet argsArray = [...arguments]\n\t\t\t\t\targsArray = target.superKlass.notifyArray(propKey, argsArray, target.proxy)\n\t\t\t\t\t\n\t\t\t\t\twhile(arguments.length > 0) {\n\t\t\t\t\t\tArray.shift(arguments)\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tArray.unshift(arguments, ...argsArray)\n\t\t\t\t\treturn propValue.apply(target, arguments, propKey)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn Reflect.get(target, propKey, receiver)\n\t}\n}\n\n/**\n * The array MField implementation is a bit different from other MField implementations.\n * An ArrayMField must act like a regular JavaScript array and therefore it forwards all\n * original ArrayMethods to the array stored within the value field and applies validation\n * where neccesary. When the array has been modified, the arrayHasChanged() callback is\n * invoked on the MObject it belongs to.\n *\n *\n * the ArrayMField always returns regular javascript values or managed objects.\n * the ArrayMField always takes regular javascript values as input.\n * the ArrayMField.value only contains objects that are instances of MFields.\n */\nexport class ArrayMField extends MField {\n\t/**\n\t * @param {Object} schema - A JSON schema that describes this MFields value\n\t * @param {MObject} superKlass - The MObject that this field belongs to\n\t */ \t\n\tconstructor(schema, superKlass) {\n\t\tsuper(\"array\", schema, [])\n\n\t\t/**\n\t\t * The MObject that this ArrayMField belongs to\n\t\t * @type {MObject}\n\t\t */\n\t\tthis.superKlass = superKlass\n\n\t\t/**\n\t\t * If we have a list of items, this parameter keeps track of which item\n\t\t * we need to use to validate the next element\n\t\t * @type {number}\n\t\t */\n\t\tthis.itemsIdx = 0\n\n\t\t/**\n\t\t * The length of the array stored in this.value\n\t\t * @type {number}\n\t\t */\n\t\tthis.length = 0\n\n\t\t/**\n\t\t * Override this[Symbol.iterator]\n\t\t */\n\t\tthis[Symbol.iterator] = this.iterator\n\t}\n\n\tsetThisProxy(proxy) {\n\t\tthis.proxy = proxy\n\t}\n\t/**\n\t * See JavaScript Array documentation\n\t */\n\tconcat(...values) {\n\t\tfor(let value of values) {\n\t\t\tif(value instanceof Array) {\n\t\t\t\tthis.push(...value)\n\t\t\t} else {\n\t\t\t\tthis.push(value)\n\t\t\t}\n\t\t}\n\t}\n\t\n\t/**\n\t * See JavaScript Array documentation\n\t */\n\tcopyWithin(target, start, end) {\n\t\treturn this.value.copyWithin(target, start, end)\n\t}\n\t\n\t/**\n\t * See JavaScript Array documentation\n\t */\n\tentries() {\n\t\treturn this.getValues().entries()\n\t}\n\t\n\t/**\n\t * See JavaScript Array documentation\n\t */\n\tevery(callback, thisarg) {\n\t\treturn this.getValues().every(callback, thisarg)\n\t}\n\t\n\t/**\n\t * See JavaScript Array documentation\n\t */\n\tfill(value, start, end) {\t\n\t\tlet newArr = this.getValues().fill(value)\n\t\tlet {valid, error, fields} = this.validate(newArr)\n\n\t\tif(valid == false) {\n\t\t\tthrow error\n\t\t} else {\n\t\t\tthis.value = fields\n\t\t\treturn newArr\n\t\t}\n\t}\n\t\n\t/**\n\t * See JavaScript Array documentation\n\t */\n\tfilter(callback, thisarg) {\n\t\treturn this.getValues().filter(callback, thisarg)\n\t}\n\n\t/**\n\t * See JavaScript Array documentation\n\t */\n\tfind(callback, thisarg) {\n\t\treturn this.getValues().find(callback, thisarg)\n\t}\n\n\t/**\n\t * See JavaScript Array documentation\n\t */\n\tfindIndex(callback, thisarg) {\n\t\treturn this.getValues().findIndex(callback, thisarg)\n\t}\n\t\n\t/**\n\t * See JavaScript Array documentation\n\t */\n\tforEach(callback, thisarg) {\n\t\tlet arr = this.getValues()\n\t\tarr.forEach(callback, thisarg)\n\n\t\tlet {valid, error, fields} = this.validate(arr)\n\t\tif(valid == false) {\n\t\t\tthrow error\n\t\t} else {\n\t\t\tthis.value = fields\n\t\t}\n\t}\n\t\n\t/**\n\t * See JavaScript Array documentation\n\t */\n\tincludes(searchElement, fromIndex = 0) {\n\t\treturn this.getValues().includes(searchElement, fromIndex)\n\t}\n\n\t/**\n\t * See JavaScript Array documentation\n\t */\n\tindexOf(searchElement, fromIndex) {\n\t\tif(fromIndex == undefined) {\n\t\t\treturn this.getValues().indexOf(searchElement)\n\t\t} else {\n\t\t\treturn this.getValues().indexOf(searchElement, fromIndex)\n\t\t}\n\t}\n\n\t/**\n\t * See JavaScript Array documentation\n\t */\n\tjoin(separator) {\n\t\treturn this.getValues().join(separator)\n\t}\n\t\n\t/**\n\t * See JavaScript Array documentation\n\t */\n\tkeys() {\n\t\treturn this.getValues().keys()\n\t}\n\n\t/**\n\t * See JavaScript Array documentation\n\t */\n\tlastIndexOf(searchElement, fromIndex) {\n\t\tif(fromIndex == undefined) {\n\t\t\treturn this.getValues().lastIndexOf(searchElement)\n\t\t} else {\n\t\t\treturn this.getValues().lastIndexOf(searchElement, fromIndex)\n\t\t}\n\t}\n\n\t/**\n\t * See JavaScript Array documentation\n\t */\n\tmap(callback, thisarg) {\n\t\tlet newArr = this.getValues().map(callback, thisarg)\n\t\treturn newArr\n\t}\n\t\n\t/**\n\t * See JavaScript Array documentation\n\t */\n\tpop() {\n\t\tlet field = this.value.pop()\n\t\tif(field != undefined) {\n\t\t\tthis.length = this.value.length\n\t\t\tif(this.schema.hasOwnProperty(\"inverseKey\")) {\n\t\t\t\tfield.value[this.schema.inverseKey] = null\n\t\t\t}\n\t\t\treturn field.getValue()\n\t\t} else {\n\t\t\treturn field\n\t\t}\n\t}\n\n\t/**\n\t * See JavaScript Array documentation\n\t */\n\tpush(...elements) {\n\t\tlet {valid, error, fields} = this.validate(elements)\n\t\t\n\n\t\tif(valid == false) {\n\t\t\tthrow error\n\t\t} else {\n\t\t\tfor(let field of fields) {\n\t\t\t\tthis.value.push(field)\n\t\t\t\tif(this.schema.hasOwnProperty(\"inverseKey\")) {\n\t\t\t\t\tif(this.schema.inverseType == \"object\") {\n\t\t\t\t\t\tif(field.getValue()[this.schema.inverseKey] != this.superKlass) {\n\t\t\t\t\t\t\tfield.getValue()[this.schema.inverseKey] = this.superKlass\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif(!field.getValue()[this.schema.inverseKey].includes(this.superKlass)) {\n\t\t\t\t\t\t\tfield.getValue()[this.schema.inverseKey].push(this.superKlass)\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tthis.itemsIdx = (this.itemsIdx+1)%this.schema.items.length\n\t\t\t\tthis.length = this.value.length\n\t\t\t}\n\t\t}\n\t}\n\t\n\t/**\n\t * See JavaScript Array documentation\n\t */\n\treduce(callback, initialValue) {\n\t\treturn this.getValues().reduce(callback, initialValue)\n\t}\n\n\t/**\n\t * See JavaScript Array documentation\n\t */\n\treduceRight(callback, initialValue) {\n\t\treturn this.getValues().reduceRight(callback, initialValue)\n\t}\n\n\t/**\n\t * See JavaScript Array documentation\n\t */\n\treverse() {\n\t\tthis.value.reverse()\n\t\treturn this.getValues()\n\t}\n\n\t/**\n\t * See JavaScript Array documentation\n\t */\n\tshift() {\n\t\tlet element = this.value.shift()\n\t\tif(this.schema.hasOwnProperty(\"inverseKey\")) {\n\t\t\tif(this.schema.inverseType == \"object\") {\n\t\t\t\telement[this.schema.inverseKey] = null\n\t\t\t} else {\n\t\t\t\telement[this.schema.inverseKey].remove(this.superKlass)\n\t\t\t}\n\t\t}\n\n\t\tthis.length = this.value.length\n\t\treturn element.getValue()\n\t}\n\t\n\t/**\n\t * See JavaScript Array documentation\n\t */\n\tslice(begin, end) {\n\t\treturn this.getValues().slice(begin, end)\n\t}\n\t\n\t/**\n\t * See JavaScript Array documentation\n\t */\n\tsome(callback, thisarg) {\n\t\treturn this.getValues().some(callback, thisarg)\n\t}\n\t\n\t/**\n\t * See JavaScript Array documentation\n\t */\n\tsort(compareFunction) {\t\n\t\tlet sorted = this.getValues().sort(compareFunction)\n\t\tlet {valid, error, fields} = this.validate(sorted)\n\t\tif(valid == false) {\n\t\t\tthrow error\n\t\t} else {\n\t\t\tthis.value = fields\n\t\t}\n\n\t}\n\n\t/**\n\t * See JavaScript Array documentation\n\t */\n\tsplice(start, deleteCount=0, ...items) {\n\t\tlet {valid, error, fields} = this.validate(items)\n\n\t\tif(valid == false) {\n\t\t\tthrow error\n\t\t} else {\n\t\t\tlet removed_values = []\n\t\t\tif(deleteCount > 0) {\n\t\t\t\tfor(let i = start; i<(start+deleteCount)%this.value.length; i++) {\n\t\t\t\t\tremoved_values.push(this.value[i].getValue())\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.value.splice(start, deleteCount, ...fields)\n\n\t\t\tif(this.schema.hasOwnProperty(\"inverseKey\")) {\n\t\t\t\tfor(let value of removed_values) {\n\t\t\t\t\tif(this.schema.inverseType == \"object\") {\n\t\t\t\t\t\tvalue[this.schema.inverseKey]=null\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif(value[this.schema.inverseKey].includes(this.superKlass)) {\n\t\t\t\t\t\t\tvalue[this.schema.inverseKey].remove(this.superKlass)\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tfor(let field of fields) {\n\t\t\t\t\tif(this.schema.inverseType == \"array\") {\n\t\t\t\t\t\tif(field.value[this.schema.inverseKey] != this.superKlass) {\n\t\t\t\t\t\t\tfield.value[this.schema.inverseKey] = this.superKlass\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif(!field.value[this.schema.inverseKey].includes(this.superKlass)) {\n\t\t\t\t\t\t\tfield.value[this.schema.inverseKey].push(this.superKlass)\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tthis.length = this.value.length\n\t}\n\t\n\t/**\n\t * See JavaScript Array documentation\n\t */\n\tunshift(...elements) {\n\t\tlet {valid, error, fields} = this.validate(elements)\n\n\t\tif(valid == false) {\n\t\t\tthrow new TypeError(error)\n\t\t} else {\n\t\t\tthis.value.unshift(...fields)\n\t\t\t\n\t\t\tif(this.schema.hasOwnProperty(\"inverseKey\")) {\n\t\t\t\tfor(let field of fields) {\n\t\t\t\t\tif(this.schema.inverseType == \"object\") {\n\t\t\t\t\t\tif(field.value[this.schema.inverseKey] != this.superKlass) {\n\t\t\t\t\t\t\tfield.value[this.schema.inverseKey] = this.superKlass\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif(!field.value[this.schema.inverseKey].includes(this.superKlass)) {\n\t\t\t\t\t\t\tfield.value[this.schema.inverseKey].push(this.superKlass)\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tthis.length = this.value.length\n\t}\n\t\n\t/**\n\t * @return {Iterator} Returns an iterator object for this ArrayMFields value\n\t */\n\titerator() {\n\t\treturn this.getValues()[Symbol.iterator]()\n\t}\n\n\taddRelatedObject(other) {\n\t\tthis.push(other)\n\t}\n\n\tremove(other) {\n\t\tlet idx = this.indexOf(other)\n\t\tif(idx != null) {\n\t\t\tthis.splice(idx, 1)\n\t\t}\n\t}\n\n\t/** \n\t * Implementation of the validate function for ArrayMField \n\t *\n\t * @param {Array} values - An array containing the values to validate\n\t *\n\t * @return {Boolean, Error, MField} Boolean indicating whether all values where valid; if there were any validation errors we return the error. only when valid == false; An array containing valid MFields of the given values. only when valid == true\n\t */\n\tvalidate(values) {\n\t\tif(values == undefined) {\n\t\t\treturn {true, undefined, undefined}\n\t\t}\n\n\t\tlet fields = []\n\t\tlet valid = true;\n\t\tlet error\n\t\tlet field\n\n\t\tif(this.schema.items instanceof Array) {\n\t\t\tlet tmpItemsIdx = this.itemsIdx\n\t\t\tfor(let value of values) {\n\t\t\t\tfield = MFieldFactory(this.schema.items[tmpItemsIdx], this.superKlass)\n\t\t\t\ttmpItemsIdx++;\n\n\t\t\t\ttry { \n\t\t\t\t\tfield.setValue(value)\n\t\t\t\t} catch (err) {\n\t\t\t\t\tvalid = false\n\t\t\t\t\terror = err\n\t\t\t\t\tbreak\n\t\t\t\t}\n\n\t\t\t\tfields.push(field)\n\t\t\t}\n\t\t} else {\n\t\t\tfor(let value of values) {\n\t\t\t\tfield = MFieldFactory(this.schema.items, this.superKlass)\n\t\t\t\ttry { \n\t\t\t\t\tfield.setValue(value)\n\t\t\t\t} catch (err) {\n\t\t\t\t\tvalid = false\n\t\t\t\t\terror = err\n\t\t\t\t\tbreak\n\t\t\t\t}\n\n\t\t\t\t\n\n\t\t\t\tfields.push(field)\n\t\t\t}\n\t\t}\n\t\treturn {valid, error, fields}\n\t}\n\n\t/**\n\t * @param {Integer} idx - the index to retrieve from this array\n\t *\n\t * @return {*, Boolean} Get either returns the value on the given index or false\n\t */\n\tget(idx) {\n\t\tconsole.log(idx, this.value)\n\t\treturn this.value[idx].getValue()\n\t}\n\n\t/**\n\t * @return {String} A string representing this array\n\t */\n\ttoString() {\n\t\treturn this.getValues().toString()\n\t}\n\n\t/**\n\t * @return {Array} A regular JavaScript array containing this ArrayMFields values\n\t */\n\tgetValues() {\n\t\tlet arr = []\n\t\tfor(let val of this.value) {\n\t\t\tarr.push(val.getValue())\n\t\t}\n\t\treturn arr\n\t}\n\n\t/**\n\t * @return {ArrayMField} Since an ArrayMField works like a regular JavaScript array we return this instead of this.value\n\t */\n\tgetValue() {\n\t\treturn this.proxy\n\t}\n\n\t/**\n\t * setValue takes a value as argument and attempts to validate this value. If it was valid we set \n\t * this.value to the field returned by the validate method, otherwise we throw the error that was returned\n\t * \n\t * @param {Array} values - The value that should be set in this ArrayMField\n\t */\n\tsetValue(values) {\n\t\tif(!(values instanceof Array)) {\n\t\t\tthrow new TypeError(\"value assigned to \"+this.schema.type+\"MField can only be set to that of an actual JavaScript array\")\n\t\t} else {\n\t\t\tthis.value = [];\n\t\t\tthis.push(...values)\n\t\t}\n\t}\n}\n\n\n/**\n * Enum implementation of MField which checks the following constraints:\n *\n *\t\tREQUIRED:\n *\t\t\tvalue\t\t===>\tenum.includes(value)\n */\nexport class EnumMField extends MField {\n\t/**\n\t * @param {Object} schema - A JSON schema that describes this fields value\n\t */\n\tconstructor(schema) {\n\t\tsuper(\"enum\", schema, schema.enum[0])\n\t}\n\n\t/**\n\t * @param {*} value - The value that should be validated\n\t *\n\t * @return {Boolean, Error} Validate returns a boolean indicating whether the field is valid. If it is invalid an error is also returned\n\t */\n\tvalidate(value) {\n\t\tlet {valid, error} = super.validate(value)\n\t\tif(!this.schema.enum.includes(value)) {\n\t\t\tvalid = false\n\t\t\terror = new TypeError(\"value assigned to \"+this.schema.type+\"MField must be one of \"+JSON.stringyfy(schema.enum))\n\t\t\treturn {valid, error}\n\t\t} else {\n\t\t\treturn {valid, error}\n\t\t}\n\t}\n}\n\n/**\n *\tOneOF implementation of MFIeld which checks the following constraints:\n *\n *\t\tREQUIRED:\n *\t\t\tvalue\t\t===>\tvalue matches at least one schema in schema.oneOf\n */\nexport class OneOfMField extends MField {\n\tconstructor(schema, superKlass) {\n\t\tsuper(\"oneOf\", schema, schema.oneOf[0].klass)\n\t\t/**\n\t\t * The MObject that this OneOfMField belongs to\n\t\t * @type {MObject}\n\t\t */\n\t\tthis.superKlass = superKlass\n\t}\t\n\n\t/**\n\t * @param {*} value - The value that should be validated\n\t *\n\t * @return {Boolean, Error, MField} Validate returns a boolean indicating whether the field is valid. If it is invalid an error is also returned. If it was valid, the valid MField is returned\n\t */\n\tvalidate(value) {\n\t\tlet {valid, error} = super.validate(value)\n\t\tlet field\n\n\t\tfor(let schema of this.schema.oneOf) {\n\t\t\ttry{\n\t\t\t\tfield = MFieldFactory(schema, this.superKlass)\n\t\t\t\tfield.setValue(value)\n\t\t\t\tvalid = true\n\t\t\t\treturn {valid, error, field}\n\t\t\t} catch (err) {\n\t\t\t\t/* do nothing, try next value */\n\t\t\t}\n\t\t}\n\t\tvalid = false\n\t\terror = new TypeError(\"value assigned to \"+this.schema.type+\"MField does not match any of the schemas defined in oneOf\")\n\t\treturn {valid, error, field}\n\t}\n\n\t/**\n\t * setValue takes a value as argument and attempts to validate this value. If it was valid we set \n\t * this.value to the field returned by the validate method, otherwise we throw the error that was returned\n\t * \n\t * @param {*} value - The value that should be set in this MField\n\t */\n\tsetValue(value) {\n\t\tlet {valid, error, field} = this.validate(value)\n\n\t\tif(valid == false) {\n\t\t\tthrow error\n\t\t} else {\n\t\t\tthis.value = field\n\t\t}\n\t}\n\t\n\t/**\n\t * @return {*} This OneOfMFields value\n\t */\n\tgetValue() {\n\t\treturn this.value.getValue()\n\t}\n}",
    "static": true,
    "longname": "/home/gebruiker/Documenten/BSc/code/ManagedDataJS/src/js/framework/dataManager/fields/MFieldMulti.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 117,
    "kind": "class",
    "name": "ArrayHandler",
    "memberof": "framework/dataManager/fields/MFieldMulti.js",
    "static": true,
    "longname": "framework/dataManager/fields/MFieldMulti.js~ArrayHandler",
    "access": "public",
    "export": true,
    "importPath": "ManagedDataJS/framework/dataManager/fields/MFieldMulti.js",
    "importStyle": "{ArrayHandler}",
    "description": "The ArrayHandler ensures that ArrayMfield[idx] returns ArrayMField.value[idx] when idx is an integer",
    "lineNumber": 7,
    "interface": false
  },
  {
    "__docId__": 118,
    "kind": "method",
    "name": "get",
    "memberof": "framework/dataManager/fields/MFieldMulti.js~ArrayHandler",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "framework/dataManager/fields/MFieldMulti.js~ArrayHandler#get",
    "access": "public",
    "description": "",
    "lineNumber": 15,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "target",
        "description": "The target object."
      },
      {
        "nullable": null,
        "types": [
          "String, Symbol"
        ],
        "spread": false,
        "optional": false,
        "name": "propKey",
        "description": "The name of the property to get."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "receiver",
        "description": "Either the proxy or an object that inherits from the proxy."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "Either the value stored at the requested index or the result of Reflect.get()"
    }
  },
  {
    "__docId__": 119,
    "kind": "class",
    "name": "ArrayMField",
    "memberof": "framework/dataManager/fields/MFieldMulti.js",
    "static": true,
    "longname": "framework/dataManager/fields/MFieldMulti.js~ArrayMField",
    "access": "public",
    "export": true,
    "importPath": "ManagedDataJS/framework/dataManager/fields/MFieldMulti.js",
    "importStyle": "{ArrayMField}",
    "description": "The array MField implementation is a bit different from other MField implementations.\nAn ArrayMField must act like a regular JavaScript array and therefore it forwards all\noriginal ArrayMethods to the array stored within the value field and applies validation\nwhere neccesary. When the array has been modified, the arrayHasChanged() callback is\ninvoked on the MObject it belongs to.\n\n\nthe ArrayMField always returns regular javascript values or managed objects.\nthe ArrayMField always takes regular javascript values as input.\nthe ArrayMField.value only contains objects that are instances of MFields.",
    "lineNumber": 51,
    "interface": false,
    "extends": [
      "framework/dataManager/fields/MFieldSingle.js~MField"
    ]
  },
  {
    "__docId__": 120,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "framework/dataManager/fields/MFieldMulti.js~ArrayMField",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "framework/dataManager/fields/MFieldMulti.js~ArrayMField#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 56,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "schema",
        "description": "A JSON schema that describes this MFields value"
      },
      {
        "nullable": null,
        "types": [
          "MObject"
        ],
        "spread": false,
        "optional": false,
        "name": "superKlass",
        "description": "The MObject that this field belongs to"
      }
    ]
  },
  {
    "__docId__": 121,
    "kind": "member",
    "name": "superKlass",
    "memberof": "framework/dataManager/fields/MFieldMulti.js~ArrayMField",
    "static": false,
    "longname": "framework/dataManager/fields/MFieldMulti.js~ArrayMField#superKlass",
    "access": "public",
    "description": "The MObject that this ArrayMField belongs to",
    "lineNumber": 63,
    "type": {
      "nullable": null,
      "types": [
        "MObject"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 122,
    "kind": "member",
    "name": "itemsIdx",
    "memberof": "framework/dataManager/fields/MFieldMulti.js~ArrayMField",
    "static": false,
    "longname": "framework/dataManager/fields/MFieldMulti.js~ArrayMField#itemsIdx",
    "access": "public",
    "description": "If we have a list of items, this parameter keeps track of which item\nwe need to use to validate the next element",
    "lineNumber": 70,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 123,
    "kind": "member",
    "name": "length",
    "memberof": "framework/dataManager/fields/MFieldMulti.js~ArrayMField",
    "static": false,
    "longname": "framework/dataManager/fields/MFieldMulti.js~ArrayMField#length",
    "access": "public",
    "description": "The length of the array stored in this.value",
    "lineNumber": 76,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 124,
    "kind": "member",
    "name": "[Symbol.iterator]",
    "memberof": "framework/dataManager/fields/MFieldMulti.js~ArrayMField",
    "static": false,
    "longname": "framework/dataManager/fields/MFieldMulti.js~ArrayMField#[Symbol.iterator]",
    "access": "public",
    "description": "Override this[Symbol.iterator]",
    "lineNumber": 81,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 125,
    "kind": "method",
    "name": "setThisProxy",
    "memberof": "framework/dataManager/fields/MFieldMulti.js~ArrayMField",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "framework/dataManager/fields/MFieldMulti.js~ArrayMField#setThisProxy",
    "access": "public",
    "description": null,
    "lineNumber": 84,
    "undocument": true,
    "params": [
      {
        "name": "proxy",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 126,
    "kind": "member",
    "name": "proxy",
    "memberof": "framework/dataManager/fields/MFieldMulti.js~ArrayMField",
    "static": false,
    "longname": "framework/dataManager/fields/MFieldMulti.js~ArrayMField#proxy",
    "access": "public",
    "description": null,
    "lineNumber": 85,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 127,
    "kind": "method",
    "name": "concat",
    "memberof": "framework/dataManager/fields/MFieldMulti.js~ArrayMField",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "framework/dataManager/fields/MFieldMulti.js~ArrayMField#concat",
    "access": "public",
    "description": "See JavaScript Array documentation",
    "lineNumber": 90,
    "params": [
      {
        "name": "values",
        "types": [
          "...*"
        ],
        "spread": true
      }
    ],
    "return": null
  },
  {
    "__docId__": 128,
    "kind": "method",
    "name": "copyWithin",
    "memberof": "framework/dataManager/fields/MFieldMulti.js~ArrayMField",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "framework/dataManager/fields/MFieldMulti.js~ArrayMField#copyWithin",
    "access": "public",
    "description": "See JavaScript Array documentation",
    "lineNumber": 103,
    "params": [
      {
        "name": "target",
        "types": [
          "*"
        ]
      },
      {
        "name": "start",
        "types": [
          "*"
        ]
      },
      {
        "name": "end",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 129,
    "kind": "method",
    "name": "entries",
    "memberof": "framework/dataManager/fields/MFieldMulti.js~ArrayMField",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "framework/dataManager/fields/MFieldMulti.js~ArrayMField#entries",
    "access": "public",
    "description": "See JavaScript Array documentation",
    "lineNumber": 110,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 130,
    "kind": "method",
    "name": "every",
    "memberof": "framework/dataManager/fields/MFieldMulti.js~ArrayMField",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "framework/dataManager/fields/MFieldMulti.js~ArrayMField#every",
    "access": "public",
    "description": "See JavaScript Array documentation",
    "lineNumber": 117,
    "params": [
      {
        "name": "callback",
        "types": [
          "*"
        ]
      },
      {
        "name": "thisarg",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 131,
    "kind": "method",
    "name": "fill",
    "memberof": "framework/dataManager/fields/MFieldMulti.js~ArrayMField",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "framework/dataManager/fields/MFieldMulti.js~ArrayMField#fill",
    "access": "public",
    "description": "See JavaScript Array documentation",
    "lineNumber": 124,
    "params": [
      {
        "name": "value",
        "types": [
          "*"
        ]
      },
      {
        "name": "start",
        "types": [
          "*"
        ]
      },
      {
        "name": "end",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 132,
    "kind": "member",
    "name": "value",
    "memberof": "framework/dataManager/fields/MFieldMulti.js~ArrayMField",
    "static": false,
    "longname": "framework/dataManager/fields/MFieldMulti.js~ArrayMField#value",
    "access": "public",
    "description": null,
    "lineNumber": 131,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 133,
    "kind": "method",
    "name": "filter",
    "memberof": "framework/dataManager/fields/MFieldMulti.js~ArrayMField",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "framework/dataManager/fields/MFieldMulti.js~ArrayMField#filter",
    "access": "public",
    "description": "See JavaScript Array documentation",
    "lineNumber": 139,
    "params": [
      {
        "name": "callback",
        "types": [
          "*"
        ]
      },
      {
        "name": "thisarg",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 134,
    "kind": "method",
    "name": "find",
    "memberof": "framework/dataManager/fields/MFieldMulti.js~ArrayMField",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "framework/dataManager/fields/MFieldMulti.js~ArrayMField#find",
    "access": "public",
    "description": "See JavaScript Array documentation",
    "lineNumber": 146,
    "params": [
      {
        "name": "callback",
        "types": [
          "*"
        ]
      },
      {
        "name": "thisarg",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 135,
    "kind": "method",
    "name": "findIndex",
    "memberof": "framework/dataManager/fields/MFieldMulti.js~ArrayMField",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "framework/dataManager/fields/MFieldMulti.js~ArrayMField#findIndex",
    "access": "public",
    "description": "See JavaScript Array documentation",
    "lineNumber": 153,
    "params": [
      {
        "name": "callback",
        "types": [
          "*"
        ]
      },
      {
        "name": "thisarg",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 136,
    "kind": "method",
    "name": "forEach",
    "memberof": "framework/dataManager/fields/MFieldMulti.js~ArrayMField",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "framework/dataManager/fields/MFieldMulti.js~ArrayMField#forEach",
    "access": "public",
    "description": "See JavaScript Array documentation",
    "lineNumber": 160,
    "params": [
      {
        "name": "callback",
        "types": [
          "*"
        ]
      },
      {
        "name": "thisarg",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 138,
    "kind": "method",
    "name": "includes",
    "memberof": "framework/dataManager/fields/MFieldMulti.js~ArrayMField",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "framework/dataManager/fields/MFieldMulti.js~ArrayMField#includes",
    "access": "public",
    "description": "See JavaScript Array documentation",
    "lineNumber": 175,
    "params": [
      {
        "name": "searchElement",
        "types": [
          "*"
        ]
      },
      {
        "name": "fromIndex",
        "optional": true,
        "types": [
          "number"
        ],
        "defaultRaw": 0,
        "defaultValue": "0"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 139,
    "kind": "method",
    "name": "indexOf",
    "memberof": "framework/dataManager/fields/MFieldMulti.js~ArrayMField",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "framework/dataManager/fields/MFieldMulti.js~ArrayMField#indexOf",
    "access": "public",
    "description": "See JavaScript Array documentation",
    "lineNumber": 182,
    "params": [
      {
        "name": "searchElement",
        "types": [
          "*"
        ]
      },
      {
        "name": "fromIndex",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 140,
    "kind": "method",
    "name": "join",
    "memberof": "framework/dataManager/fields/MFieldMulti.js~ArrayMField",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "framework/dataManager/fields/MFieldMulti.js~ArrayMField#join",
    "access": "public",
    "description": "See JavaScript Array documentation",
    "lineNumber": 193,
    "params": [
      {
        "name": "separator",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 141,
    "kind": "method",
    "name": "keys",
    "memberof": "framework/dataManager/fields/MFieldMulti.js~ArrayMField",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "framework/dataManager/fields/MFieldMulti.js~ArrayMField#keys",
    "access": "public",
    "description": "See JavaScript Array documentation",
    "lineNumber": 200,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 142,
    "kind": "method",
    "name": "lastIndexOf",
    "memberof": "framework/dataManager/fields/MFieldMulti.js~ArrayMField",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "framework/dataManager/fields/MFieldMulti.js~ArrayMField#lastIndexOf",
    "access": "public",
    "description": "See JavaScript Array documentation",
    "lineNumber": 207,
    "params": [
      {
        "name": "searchElement",
        "types": [
          "*"
        ]
      },
      {
        "name": "fromIndex",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 143,
    "kind": "method",
    "name": "map",
    "memberof": "framework/dataManager/fields/MFieldMulti.js~ArrayMField",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "framework/dataManager/fields/MFieldMulti.js~ArrayMField#map",
    "access": "public",
    "description": "See JavaScript Array documentation",
    "lineNumber": 218,
    "params": [
      {
        "name": "callback",
        "types": [
          "*"
        ]
      },
      {
        "name": "thisarg",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 144,
    "kind": "method",
    "name": "pop",
    "memberof": "framework/dataManager/fields/MFieldMulti.js~ArrayMField",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "framework/dataManager/fields/MFieldMulti.js~ArrayMField#pop",
    "access": "public",
    "description": "See JavaScript Array documentation",
    "lineNumber": 226,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 146,
    "kind": "method",
    "name": "push",
    "memberof": "framework/dataManager/fields/MFieldMulti.js~ArrayMField",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "framework/dataManager/fields/MFieldMulti.js~ArrayMField#push",
    "access": "public",
    "description": "See JavaScript Array documentation",
    "lineNumber": 242,
    "params": [
      {
        "name": "elements",
        "types": [
          "...*"
        ],
        "spread": true
      }
    ],
    "return": null
  },
  {
    "__docId__": 149,
    "kind": "method",
    "name": "reduce",
    "memberof": "framework/dataManager/fields/MFieldMulti.js~ArrayMField",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "framework/dataManager/fields/MFieldMulti.js~ArrayMField#reduce",
    "access": "public",
    "description": "See JavaScript Array documentation",
    "lineNumber": 271,
    "params": [
      {
        "name": "callback",
        "types": [
          "*"
        ]
      },
      {
        "name": "initialValue",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 150,
    "kind": "method",
    "name": "reduceRight",
    "memberof": "framework/dataManager/fields/MFieldMulti.js~ArrayMField",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "framework/dataManager/fields/MFieldMulti.js~ArrayMField#reduceRight",
    "access": "public",
    "description": "See JavaScript Array documentation",
    "lineNumber": 278,
    "params": [
      {
        "name": "callback",
        "types": [
          "*"
        ]
      },
      {
        "name": "initialValue",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 151,
    "kind": "method",
    "name": "reverse",
    "memberof": "framework/dataManager/fields/MFieldMulti.js~ArrayMField",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "framework/dataManager/fields/MFieldMulti.js~ArrayMField#reverse",
    "access": "public",
    "description": "See JavaScript Array documentation",
    "lineNumber": 285,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 152,
    "kind": "method",
    "name": "shift",
    "memberof": "framework/dataManager/fields/MFieldMulti.js~ArrayMField",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "framework/dataManager/fields/MFieldMulti.js~ArrayMField#shift",
    "access": "public",
    "description": "See JavaScript Array documentation",
    "lineNumber": 293,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 154,
    "kind": "method",
    "name": "slice",
    "memberof": "framework/dataManager/fields/MFieldMulti.js~ArrayMField",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "framework/dataManager/fields/MFieldMulti.js~ArrayMField#slice",
    "access": "public",
    "description": "See JavaScript Array documentation",
    "lineNumber": 310,
    "params": [
      {
        "name": "begin",
        "types": [
          "*"
        ]
      },
      {
        "name": "end",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 155,
    "kind": "method",
    "name": "some",
    "memberof": "framework/dataManager/fields/MFieldMulti.js~ArrayMField",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "framework/dataManager/fields/MFieldMulti.js~ArrayMField#some",
    "access": "public",
    "description": "See JavaScript Array documentation",
    "lineNumber": 317,
    "params": [
      {
        "name": "callback",
        "types": [
          "*"
        ]
      },
      {
        "name": "thisarg",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 156,
    "kind": "method",
    "name": "sort",
    "memberof": "framework/dataManager/fields/MFieldMulti.js~ArrayMField",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "framework/dataManager/fields/MFieldMulti.js~ArrayMField#sort",
    "access": "public",
    "description": "See JavaScript Array documentation",
    "lineNumber": 324,
    "params": [
      {
        "name": "compareFunction",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 158,
    "kind": "method",
    "name": "splice",
    "memberof": "framework/dataManager/fields/MFieldMulti.js~ArrayMField",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "framework/dataManager/fields/MFieldMulti.js~ArrayMField#splice",
    "access": "public",
    "description": "See JavaScript Array documentation",
    "lineNumber": 338,
    "params": [
      {
        "name": "start",
        "types": [
          "*"
        ]
      },
      {
        "name": "deleteCount",
        "optional": true,
        "types": [
          "number"
        ],
        "defaultRaw": 0,
        "defaultValue": "0"
      },
      {
        "name": "items",
        "types": [
          "...*"
        ],
        "spread": true
      }
    ],
    "return": null
  },
  {
    "__docId__": 160,
    "kind": "method",
    "name": "unshift",
    "memberof": "framework/dataManager/fields/MFieldMulti.js~ArrayMField",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "framework/dataManager/fields/MFieldMulti.js~ArrayMField#unshift",
    "access": "public",
    "description": "See JavaScript Array documentation",
    "lineNumber": 383,
    "params": [
      {
        "name": "elements",
        "types": [
          "...*"
        ],
        "spread": true
      }
    ],
    "return": null
  },
  {
    "__docId__": 162,
    "kind": "method",
    "name": "iterator",
    "memberof": "framework/dataManager/fields/MFieldMulti.js~ArrayMField",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "framework/dataManager/fields/MFieldMulti.js~ArrayMField#iterator",
    "access": "public",
    "description": "",
    "lineNumber": 412,
    "return": {
      "nullable": null,
      "types": [
        "Iterator"
      ],
      "spread": false,
      "description": "Returns an iterator object for this ArrayMFields value"
    },
    "params": []
  },
  {
    "__docId__": 163,
    "kind": "method",
    "name": "addRelatedObject",
    "memberof": "framework/dataManager/fields/MFieldMulti.js~ArrayMField",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "framework/dataManager/fields/MFieldMulti.js~ArrayMField#addRelatedObject",
    "access": "public",
    "description": null,
    "lineNumber": 416,
    "undocument": true,
    "params": [
      {
        "name": "other",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 164,
    "kind": "method",
    "name": "remove",
    "memberof": "framework/dataManager/fields/MFieldMulti.js~ArrayMField",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "framework/dataManager/fields/MFieldMulti.js~ArrayMField#remove",
    "access": "public",
    "description": null,
    "lineNumber": 420,
    "undocument": true,
    "params": [
      {
        "name": "other",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 165,
    "kind": "method",
    "name": "validate",
    "memberof": "framework/dataManager/fields/MFieldMulti.js~ArrayMField",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "framework/dataManager/fields/MFieldMulti.js~ArrayMField#validate",
    "access": "public",
    "description": "Implementation of the validate function for ArrayMField ",
    "lineNumber": 434,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "values",
        "description": "An array containing the values to validate"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean, Error, MField"
      ],
      "spread": false,
      "description": "Boolean indicating whether all values where valid; if there were any validation errors we return the error. only when valid == false; An array containing valid MFields of the given values. only when valid == true"
    }
  },
  {
    "__docId__": 166,
    "kind": "method",
    "name": "get",
    "memberof": "framework/dataManager/fields/MFieldMulti.js~ArrayMField",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "framework/dataManager/fields/MFieldMulti.js~ArrayMField#get",
    "access": "public",
    "description": "",
    "lineNumber": 484,
    "params": [
      {
        "nullable": null,
        "types": [
          "Integer"
        ],
        "spread": false,
        "optional": false,
        "name": "idx",
        "description": "the index to retrieve from this array"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*, Boolean"
      ],
      "spread": false,
      "description": "Get either returns the value on the given index or false"
    }
  },
  {
    "__docId__": 167,
    "kind": "method",
    "name": "toString",
    "memberof": "framework/dataManager/fields/MFieldMulti.js~ArrayMField",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "framework/dataManager/fields/MFieldMulti.js~ArrayMField#toString",
    "access": "public",
    "description": "",
    "lineNumber": 492,
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "A string representing this array"
    },
    "params": []
  },
  {
    "__docId__": 168,
    "kind": "method",
    "name": "getValues",
    "memberof": "framework/dataManager/fields/MFieldMulti.js~ArrayMField",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "framework/dataManager/fields/MFieldMulti.js~ArrayMField#getValues",
    "access": "public",
    "description": "",
    "lineNumber": 499,
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": "A regular JavaScript array containing this ArrayMFields values"
    },
    "params": []
  },
  {
    "__docId__": 169,
    "kind": "method",
    "name": "getValue",
    "memberof": "framework/dataManager/fields/MFieldMulti.js~ArrayMField",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "framework/dataManager/fields/MFieldMulti.js~ArrayMField#getValue",
    "access": "public",
    "description": "",
    "lineNumber": 510,
    "return": {
      "nullable": null,
      "types": [
        "ArrayMField"
      ],
      "spread": false,
      "description": "Since an ArrayMField works like a regular JavaScript array we return this instead of this.value"
    },
    "params": []
  },
  {
    "__docId__": 170,
    "kind": "method",
    "name": "setValue",
    "memberof": "framework/dataManager/fields/MFieldMulti.js~ArrayMField",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "framework/dataManager/fields/MFieldMulti.js~ArrayMField#setValue",
    "access": "public",
    "description": "setValue takes a value as argument and attempts to validate this value. If it was valid we set \nthis.value to the field returned by the validate method, otherwise we throw the error that was returned",
    "lineNumber": 520,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "values",
        "description": "The value that should be set in this ArrayMField"
      }
    ],
    "return": null
  },
  {
    "__docId__": 172,
    "kind": "class",
    "name": "EnumMField",
    "memberof": "framework/dataManager/fields/MFieldMulti.js",
    "static": true,
    "longname": "framework/dataManager/fields/MFieldMulti.js~EnumMField",
    "access": "public",
    "export": true,
    "importPath": "ManagedDataJS/framework/dataManager/fields/MFieldMulti.js",
    "importStyle": "{EnumMField}",
    "description": "Enum implementation of MField which checks the following constraints:\n\n\tREQUIRED:\n\t\tvalue\t\t===>\tenum.includes(value)",
    "lineNumber": 537,
    "interface": false,
    "extends": [
      "framework/dataManager/fields/MFieldSingle.js~MField"
    ]
  },
  {
    "__docId__": 173,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "framework/dataManager/fields/MFieldMulti.js~EnumMField",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "framework/dataManager/fields/MFieldMulti.js~EnumMField#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 541,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "schema",
        "description": "A JSON schema that describes this fields value"
      }
    ]
  },
  {
    "__docId__": 174,
    "kind": "method",
    "name": "validate",
    "memberof": "framework/dataManager/fields/MFieldMulti.js~EnumMField",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "framework/dataManager/fields/MFieldMulti.js~EnumMField#validate",
    "access": "public",
    "description": "",
    "lineNumber": 550,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "The value that should be validated"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean, Error"
      ],
      "spread": false,
      "description": "Validate returns a boolean indicating whether the field is valid. If it is invalid an error is also returned"
    }
  },
  {
    "__docId__": 175,
    "kind": "class",
    "name": "OneOfMField",
    "memberof": "framework/dataManager/fields/MFieldMulti.js",
    "static": true,
    "longname": "framework/dataManager/fields/MFieldMulti.js~OneOfMField",
    "access": "public",
    "export": true,
    "importPath": "ManagedDataJS/framework/dataManager/fields/MFieldMulti.js",
    "importStyle": "{OneOfMField}",
    "description": "OneOF implementation of MFIeld which checks the following constraints:\n\n\tREQUIRED:\n\t\tvalue\t\t===>\tvalue matches at least one schema in schema.oneOf",
    "lineNumber": 568,
    "interface": false,
    "extends": [
      "framework/dataManager/fields/MFieldSingle.js~MField"
    ]
  },
  {
    "__docId__": 176,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "framework/dataManager/fields/MFieldMulti.js~OneOfMField",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "framework/dataManager/fields/MFieldMulti.js~OneOfMField#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 569,
    "undocument": true
  },
  {
    "__docId__": 177,
    "kind": "member",
    "name": "superKlass",
    "memberof": "framework/dataManager/fields/MFieldMulti.js~OneOfMField",
    "static": false,
    "longname": "framework/dataManager/fields/MFieldMulti.js~OneOfMField#superKlass",
    "access": "public",
    "description": "The MObject that this OneOfMField belongs to",
    "lineNumber": 575,
    "type": {
      "nullable": null,
      "types": [
        "MObject"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 178,
    "kind": "method",
    "name": "validate",
    "memberof": "framework/dataManager/fields/MFieldMulti.js~OneOfMField",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "framework/dataManager/fields/MFieldMulti.js~OneOfMField#validate",
    "access": "public",
    "description": "",
    "lineNumber": 583,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "The value that should be validated"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean, Error, MField"
      ],
      "spread": false,
      "description": "Validate returns a boolean indicating whether the field is valid. If it is invalid an error is also returned. If it was valid, the valid MField is returned"
    }
  },
  {
    "__docId__": 179,
    "kind": "method",
    "name": "setValue",
    "memberof": "framework/dataManager/fields/MFieldMulti.js~OneOfMField",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "framework/dataManager/fields/MFieldMulti.js~OneOfMField#setValue",
    "access": "public",
    "description": "setValue takes a value as argument and attempts to validate this value. If it was valid we set \nthis.value to the field returned by the validate method, otherwise we throw the error that was returned",
    "lineNumber": 608,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "The value that should be set in this MField"
      }
    ],
    "return": null
  },
  {
    "__docId__": 180,
    "kind": "member",
    "name": "value",
    "memberof": "framework/dataManager/fields/MFieldMulti.js~OneOfMField",
    "static": false,
    "longname": "framework/dataManager/fields/MFieldMulti.js~OneOfMField#value",
    "access": "public",
    "description": null,
    "lineNumber": 614,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 181,
    "kind": "method",
    "name": "getValue",
    "memberof": "framework/dataManager/fields/MFieldMulti.js~OneOfMField",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "framework/dataManager/fields/MFieldMulti.js~OneOfMField#getValue",
    "access": "public",
    "description": "",
    "lineNumber": 621,
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "This OneOfMFields value"
    },
    "params": []
  },
  {
    "__docId__": 182,
    "kind": "file",
    "name": "framework/dataManager/fields/MFieldSingle.js",
    "content": "import {MObject} from \"../MObject\"\n\n/**\n * The basic MField class privides the API for data managers that\n * want to use the MFields values. By default we can invoke:\n *\t\t\n * getValue\t\treturns the internal value of the MField.\n * setValue\t\tused to set the internal value of the MField.\n * getType\t\t\treturns the type of the value stored in the MField.4\n * toString\t\treturns a string representing this fields value\n *\n * Each class that extends MField must provide the validate(value) function\n * which returns true iff the given parameter matches the schema for this MField.\n */\nexport class MField {\n\t/**\n\t * @param {String} type - A string representing the type of this MField\n\t * @param {Object} schema - A JSON schema that describes this fields value\n\t * @param {*} value - The value that should be used to initialize this MField\n\t */\n\tconstructor(type, schema, value) {\n\t\t/**\n\t\t * String representing the type of the MField's value\n\t\t * @type {String}\n\t\t */\n\t\tthis.type = type\n\n\t\t/**\n\t\t * The schema describing this value\n\t\t * @type {Schema}\n\t\t */\n\t\tthis.schema = schema\n\n\t\t/**\n\t\t * The initial value for this MField\n\t\t * @type {*}\n\t\t */\n\t\tthis.value = value\n\t}\n\n\t/**\n\t * setValue takes a value as argument and attempts to validate this value. If it was valid we set \n\t * this.value to the value, and otherwise we throw the error returned by the validate method\n\t * \n\t * @param {*} value - The value that should be set in this MField\n\t */\n\tsetValue(value) {\n\t\tlet {valid, error} = this.validate(value)\n\t\tif(valid == false) {\n\t\t\tthrow error\n\t\t} else {\n\t\t\tthis.value = value\n\t\t}\n\t}\n\n\t/**\n\t * @return {*} This MFields value\n\t */\n\tgetValue() {\n\t\treturn this.value\n\t}\n\n\t/**\n\t * @return {String} A string representing this MFields type\n\t */\n\tgetType() {\n\t\treturn this.type\n\t}\n\n\t/**\n\t * @return String representing this MFields value\n\t */\n\ttoString() {\n\t\treturn this.type\n\t}\n\n\tvalidate(value) {\n\t\tlet valid = true\n\t\tlet error\n\n\t\tif(value === undefined) {\n\t\t\tvalid = false\n\t\t\terror = new TypeError(\"Cannot validate 'undefined' in MField of type \"+this.type)\n\t\t}\n\t\treturn {valid, error}\n\t}\n\n\tis(other) {\n\t\tif(other.getValue() === this.value) {\n\t\t\treturn true\n\t\t} else {\n\t\t\treturn false\n\t\t}\n\t}\n}\n\n/**\n * Number implementation of MField which checks the following constraints:\n * \t\t\n *\t\tREQUIRED:\n * \t\t\tvalue \t\t\t\t\t\t\t===>\ttypeof(value) == typeof(Number)\n *\t\tOPTIONAL:\n *\t\t\tminimum && exclusiveMinimum \t===> \tvalue > minimum\n *\t\t\tminimum \t\t\t\t\t\t===>\tvalue >= minimum\n *\t\t\tmaximum && exclusiveMaximum\t\t===>\tvalue < maximum\n *\t\t\tmaximum \t\t\t\t\t\t===>\tvalue <= maximum\n *\t\t\tmultipleOf\t\t\t\t\t\t===>\tvalue%multipleOf == 0\n *\n *\n */\nexport class NumberMField extends MField {\n\t/**\n\t * @param {Object} schema - A JSON schema that describes this MFields value\n\t */ \n\tconstructor(schema) {\n\t\tif(schema.hasOwnProperty(\"minimum\")) {\n\t\t\tsuper(\"number\", schema, schema.minimum)\n\t\t} else {\n\t\t\tsuper(\"number\", schema, 0)\n\t\t}\n\t}\n\n\t/**\n\t * @param {*} value - The value that should be validated\n\t *\n\t * @return {Boolean, Error} Validate returns a boolean indicating whether the field is valid. If it is invalid an error is also returned\n\t */ \n\tvalidate(value) {\n\t\tlet {valid, error} = super.validate(value)\n\n\t\tif(valid == false) {\n\t\t\treturn {valid, error}\n\t\t}\n\n\t\tif(typeof(value) == \"number\") {\n\t\t\tif( this.schema.hasOwnProperty(\"exclusiveMinimum\") && this.schema.hasOwnProperty(\"minimum\") && value <= this.schema.minimum) {\n\t\t\t\terror = new TypeError(\"Value assigned to \"+this.type+\"MField must be greater than \"+this.schema.minimum)\n\t\t\t\tvalid = false\n\t\t\t\treturn {valid, error}\n\t\t\t} else if(this.schema.hasOwnProperty(\"minimum\") && value < this.schema.minimum) {\n\t\t\t\terror = new TypeError(\"value assigned to \"+this.type+\"MField must be greater than or equal to \"+this.schema.minimum)\n\t\t\t\tvalid = false\n\t\t\t\treturn {valid, error}\n\t\t\t}\n\n\t\t\tif(this.schema.hasOwnProperty(\"exclusiveMaximum\") && this.schema.hasOwnProperty(\"maximum\") && value >= this.schema.maximum) {\n\t\t\t\terror = new TypeError(\"value assigned to \"+this.type+\"MField must be less than \"+this.schema.maximum)\n\t\t\t\tvalid = false\n\t\t\t\treturn {valid, error}\n\t\t\t} else if (this.schema.hasOwnProperty(\"maximum\") && value > this.schema.maximum) {\n\t\t\t\terror = new TypeError(\"value assigned to \"+this.type+\"MField must be less than or equal to \"+this.schema.maximum)\n\t\t\t\tvalid = false\n\t\t\t\treturn {valid, error}\n\t\t\t}\n\n\t\t\tif(this.schema.hasOwnProperty(\"multipleOf\") && value%this.schema.multipleOf != 0) {\n\t\t\t\terror = new TypeError(\"value assigned to \"+this.type+\"MField must be a multiple of \" + this.schema.multipleOf)\n\t\t\t\tvalid = false\n\t\t\t\treturn {valid, error}\n\t\t\t}\n\n\n\t\t\tvalid = true\n\t\t} else {\n\t\t\terror = new TypeError(\"value assigned to \"+this.type+\"MField must be of type \"+this.schema.type)\n\t\t}\n\t\treturn {valid, error}\n\t}\n}\n\n\n/**\n * Integer implementation of MField which checks the following constraints:\n *\n *\t\tREQUIRED:\n *\t\t\tvalue \t===>\tvalue%1 == 0\n */\nexport class IntegerMField extends NumberMField {\n\t/**\n\t * @param {Object} schema - A JSON schema that describes this MFields value\n\t */ \n\tconstructor(schema) {\n\t\tsuper(schema)\n\t\t/**\n\t\t * Override NumberMFields type\n\t\t * @type {String}\n\t\t */\n\t\tthis.type = \"integer\"\n\t}\n\n\t/**\n\t * @param {*} value - The value that should be validated\n\t *\n\t * @return {Boolean, Error} Validate returns a boolean indicating whether the field is valid. If it is invalid an error is also returned\n\t */\n\tvalidate(value) {\n\t\tlet {valid, error} = super.validate(value)\n\t\tif(valid == true) {\n\t\t\tif(value%1 == 0) {\n\t\t\t\tvalid = true\n\t\t\t} else {\n\t\t\t\tvalid = false\n\t\t\t\terror = new TypeError(\"value assigned to \"+this.type+\"MField must be of type \"+this.schema.type)\n\t\t\t}\n\t\t}\n\t\treturn {valid, error}\n\t}\n}\n\n\n /**\n *\tString implementation of MField which checks the following constraints:\n *\n *\t\tREQUIRED:\n *\t\t\tvalue \t\t===>\ttypeof(value) == typeof(String)\n *\t\tOPTIONAL:\n *\t\t\tminLength\t===>\tvalue.length >= minLength\n *\t\t\tmaxLength\t===>\tvalue.length <= maxLength\n *\t\t\tpattern\t\t===>\tvalue matches pattern\n *\t\t\tformat\t\t===>\tvalue is one of:\n * \n * \t\t\t\t\t\t\t\t\tdate-time\n * \t\t\t\t\t\t\t\t\temail\n * \t\t\t\t\t\t\t\t\thostname\n * \t\t\t\t\t\t\t\t\tipv4\n * \t\t\t\t\t\t\t\t\tipv6\n * \t\t\t\t\t\t\t\t\turi\n */\nexport class StringMField extends MField {\n\t/**\n\t * @param {Object} schema - A JSON schema that describes this MFields value\n\t */ \n\tconstructor(schema) {\n\t\tsuper(\"string\", schema, \"\")\n\t}\n\n\n\t/**\n\t * @param {*} value - The value that should be validated\n\t *\n\t * @return {Boolean, Error} Validate returns a boolean indicating whether the field is valid. If it is invalid an error is also returned\n\t */\n\tvalidate(value) {\n\t\tlet {valid, error} = super.validate(value)\n\n\t\tif(!typeof(value) === \"string\") {\n\t\t\terror = new TypeError(\"value assigned to \"+this.schema.type+\"MField must be a String\")\n\t\t\treturn {valid, error}\n\t\t}\n\n\t\tif(this.schema.hasOwnProperty(\"minLength\") && value.length < this.schema.minLength) {\n\t\t\terror = new TypeError(\"value assigned to \"+this.schema.type+\"MField is shorter than the minimum length of \"+this.schema.minLength)\n\t\t\treturn {valid, error}\n\t\t}\n\n\t\tif(this.schema.hasOwnProperty(\"maxLength\") && value.length > this.schema.maxLength + exclMax) {\n\t\t\terror = new TypeError(\"value assigned to \"+this.schema.type+\"MField is longer than the maximum length of \"+this.schema.maxLength)\n\t\t\treturn {valid, error}\n\t\t}\n\n\t\tif(this.schema.hasOwnProperty(\"pattern\") ** value.match(this.schema.pattern) == null) {\n\t\t\terror = new TypeError(\"value assigned to \"+this.schema.type+\"MField does not match the pattern \"+this.schema.pattern);\n\t\t\treturn {valid, error}\n\t\t}\n\n\t\tif(this.schema.hasOwnProperty(\"format\")) {\n\t\t\tif(this.schema.format == \"date-time\") {\n\t\t\t\tif(Date.parse(value) == NaN) {\n\t\t\t\t\terror = new TypeError(\"value assigned to \"+this.schema.type+\"MField does not match the date-time format\")\n\t\t\t\t\treturn {valid, error}\n\t\t\t\t}\n\t\t\t} else if (this.schema.format == \"email\") {\n\t\t\t\tif(/^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/.test(value) == false) {\n\t\t\t\t\terror = new TypeError(\"value assigned to \"+this.schema.type+\"MField does not match the email format\")\n\t\t\t\t\treturn {valid, error}\n\t\t\t\t}\n\t\t\t} else if (this.schema.format == \"hostname\") {\n\t\t\t\tif(/^(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\\-]*[a-zA-Z0-9])\\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\\-]*[A-Za-z0-9])$/.test(value) == false) {\n\t\t\t\t\terror = new TypeError(\"value assigned to \"+this.schema.type+\"MField does not match the hostname format\")\n\t\t\t\t\treturn {valid, error}\n\t\t\t\t}\n\t\t\t} else if (this.schema.format == \"ipv4\") {\n\t\t\t\tif(/^([0-9]{1,3}\\.){3}[0-9]{1,3}(\\/([0-9]|[1-2][0-9]|3[0-2]))?$/.test(value) == false) {\n\t\t\t\t\terror = new TypeError(\"value assigned to \"+this.schema.type+\"MField does not match the ipv4 format\")\n\t\t\t\t\treturn {valid, error}\n\t\t\t\t}\n\t\t\t} else if (this.schema.format == \"ipv6\") {\n\t\t\t\tif(/^s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4]d|1dd|[1-9]?d)(.(25[0-5]|2[0-4]d|1dd|[1-9]?d)){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4]d|1dd|[1-9]?d)(.(25[0-5]|2[0-4]d|1dd|[1-9]?d)){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4]d|1dd|[1-9]?d)(.(25[0-5]|2[0-4]d|1dd|[1-9]?d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4]d|1dd|[1-9]?d)(.(25[0-5]|2[0-4]d|1dd|[1-9]?d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4]d|1dd|[1-9]?d)(.(25[0-5]|2[0-4]d|1dd|[1-9]?d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4]d|1dd|[1-9]?d)(.(25[0-5]|2[0-4]d|1dd|[1-9]?d)){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4]d|1dd|[1-9]?d)(.(25[0-5]|2[0-4]d|1dd|[1-9]?d)){3}))|:)))(%.+)?s*(\\/([0-9]|[1-9][0-9]|1[0-1][0-9]|12[0-8]))?$/.test(value) == false) {\n\t\t\t\t\terror = new TypeError(\"value assigned to \"+this.schema.type+\"MField does not match the ipv6 format\")\n\t\t\t\t\treturn {valid, error}\n\t\t\t\t}\n\t\t\t} else if (this.schema.format == \"uri\") {\n\t\t\t\tif(/^([a-z][a-z0-9+.-]*):(?:\\/\\/((?:(?=((?:[a-z0-9-._~!$&'()*+,;=:]|%[0-9A-F]{2})*))(\\3)@)?(?=(\\[[0-9A-F:.]{2,}\\]|(?:[a-z0-9-._~!$&'()*+,;=]|%[0-9A-F]{2})*))\\5(?::(?=(\\d*))\\6)?)(\\/(?=((?:[a-z0-9-._~!$&'()*+,;=:@\\/]|%[0-9A-F]{2})*))\\8)?|(\\/?(?!\\/)(?=((?:[a-z0-9-._~!$&'()*+,;=:@\\/]|%[0-9A-F]{2})*))\\10)?)(?:\\?(?=((?:[a-z0-9-._~!$&'()*+,;=:@\\/?]|%[0-9A-F]{2})*))\\11)?(?:#(?=((?:[a-z0-9-._~!$&'()*+,;=:@\\/?]|%[0-9A-F]{2})*))\\12)?$/.test(value) == false) {\n\t\t\t\t\terror = new TypeError(\"value assigned to \"+this.schema.type+\"MField does not match the uri format\")\n\t\t\t\t\treturn {valid, error}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tvalid = true;\n\t\treturn {valid, error}\n\t}\n}\n\n/**\n * Integer implementation of MField which checks the following constraints:\n *\n *\t\tREQUIRED:\n *\t\t\tvalue \t===>\ttypeof(value) == typeof(Boolean)\n */\nexport class BooleanMField extends MField {\n\t/**\n\t * @param {Object} schema - A JSON schema that describes this MFields value\n\t */ \n\tconstructor(schema) {\n\t\tsuper(\"boolean\", schema, false)\n\t}\n\n\t/**\n\t * @param {*} value - The value that should be validated\n\t *\n\t * @return {Boolean, Error} Validate returns a boolean indicating whether the field is valid. If it is invalid an error is also returned\n\t */\n\tvalidate(value) {\n\t\tlet valid, error = super.validate(value)\n\t\tif(value === false || value === true) {\n\t\t\treturn {valid, error}\n\t\t} else {\n\t\t\tvalid = false;\n\t\t\terror = new TypeError(\"value assigned to \"+this.schema.type+\"MField must be a Boolean\")\n\t\t\treturn {valid, error}\n\t\t}\n\t}\n}\n\n/**\n * MObject implementation of MField which checks the following constraints:\n *\n *\t\tREQUIRED:\n *\t\t\tvalue \t \t\t\t===>\tvalue instanceof MObject && value.klass == schema.klass\n *\t\tOPTIONAL:\n *\t\t\tinverse\t\t \t\t===>\t(value[inverse] == this || value[inverse].includes(this))\n */\nexport class MObjectMField extends MField {\n\t/**\n\t * @param {Object} schema - A JSON schema that describes this MFields value\n\t * @param {MObject} superKlass - The MObject that this field belongs to\n\t */ \t\n\tconstructor(schema, superKlass) {\n\t\tsuper(\"object\", schema, null)\n\n\t\t/**\n\t\t * The MObject that this OneOfMField belongs to\n\t\t * @type {MObject}\n\t\t */\n\t\tthis.superKlass = superKlass\n\t}\n\n\taddRelatedObject(other) {\n\t\tthis.setValue(other)\n\t}\n\n\tremoveRelatedObject(other) {\n\t\tif(this.value == other) {\n\t\t\tthis.value = null\n\t\t}\n\t}\n\n\t/**\n\t * @param {*} value - The value that should be validated\n\t *\n\t * @return {Boolean, Error} Validate returns a boolean indicating whether the field is valid. If it is invalid an error is also returned\n\t */\n\tvalidate(value) {\n\t\tlet {valid, error} = super.validate(value)\n\t\tif(value == null) {\n\t\t\treturn {valid, error}\n\t\t}\n\n\t\t/* Validate that the given value is an MObject and that it is of the right Klass */\n\t\tif(!(value instanceof MObject && value.getKlass() == this.schema.klass)) {\n\t\t\tconsole.log(value, value instanceof MObject, value.getKlass() == this.schema.klass, this.schema)\n\t\t\terror = new TypeError(\"value assigned to \"+this.schema.type+\"MField must be managed data\")\n\t\t\tvalid = false;\n\t\t\treturn {valid, error}\n\t\t}\n\n\t\tvalid = true\n\t\treturn {valid, error}\n\t}\n\n\tsetValue(value) {\n\t\tsuper.setValue(value)\n\n\t\tif(value == null) {\n\t\t\treturn\n\t\t}\n\t\tif(this.schema.hasOwnProperty(\"inverseKey\")) {\n\t\t\tif(this.schema.inverseType == \"object\") {\n\t\t\t\tif(this.value[this.schema.inverseKey] != this.superKlass)\n\t\t\t\tvalue[this.schema.inverseKey] = this.superKlass\n\t\t\t} else {\n\t\t\t\tif(!(this.value[this.schema.inverseKey].includes(this.superKlass))) {\n\t\t\t\t\tthis.value[this.schema.inverseKey].push(this.superKlass)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}",
    "static": true,
    "longname": "/home/gebruiker/Documenten/BSc/code/ManagedDataJS/src/js/framework/dataManager/fields/MFieldSingle.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 183,
    "kind": "class",
    "name": "MField",
    "memberof": "framework/dataManager/fields/MFieldSingle.js",
    "static": true,
    "longname": "framework/dataManager/fields/MFieldSingle.js~MField",
    "access": "public",
    "export": true,
    "importPath": "ManagedDataJS/framework/dataManager/fields/MFieldSingle.js",
    "importStyle": "{MField}",
    "description": "The basic MField class privides the API for data managers that\nwant to use the MFields values. By default we can invoke:\n\t\ngetValue\t\treturns the internal value of the MField.\nsetValue\t\tused to set the internal value of the MField.\ngetType\t\t\treturns the type of the value stored in the MField.4\ntoString\t\treturns a string representing this fields value\n\nEach class that extends MField must provide the validate(value) function\nwhich returns true iff the given parameter matches the schema for this MField.",
    "lineNumber": 15,
    "interface": false
  },
  {
    "__docId__": 184,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "framework/dataManager/fields/MFieldSingle.js~MField",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "framework/dataManager/fields/MFieldSingle.js~MField#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 21,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "type",
        "description": "A string representing the type of this MField"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "schema",
        "description": "A JSON schema that describes this fields value"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "The value that should be used to initialize this MField"
      }
    ]
  },
  {
    "__docId__": 185,
    "kind": "member",
    "name": "type",
    "memberof": "framework/dataManager/fields/MFieldSingle.js~MField",
    "static": false,
    "longname": "framework/dataManager/fields/MFieldSingle.js~MField#type",
    "access": "public",
    "description": "String representing the type of the MField's value",
    "lineNumber": 26,
    "type": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 186,
    "kind": "member",
    "name": "schema",
    "memberof": "framework/dataManager/fields/MFieldSingle.js~MField",
    "static": false,
    "longname": "framework/dataManager/fields/MFieldSingle.js~MField#schema",
    "access": "public",
    "description": "The schema describing this value",
    "lineNumber": 32,
    "type": {
      "nullable": null,
      "types": [
        "Schema"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 187,
    "kind": "member",
    "name": "value",
    "memberof": "framework/dataManager/fields/MFieldSingle.js~MField",
    "static": false,
    "longname": "framework/dataManager/fields/MFieldSingle.js~MField#value",
    "access": "public",
    "description": "The initial value for this MField",
    "lineNumber": 38,
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 188,
    "kind": "method",
    "name": "setValue",
    "memberof": "framework/dataManager/fields/MFieldSingle.js~MField",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "framework/dataManager/fields/MFieldSingle.js~MField#setValue",
    "access": "public",
    "description": "setValue takes a value as argument and attempts to validate this value. If it was valid we set \nthis.value to the value, and otherwise we throw the error returned by the validate method",
    "lineNumber": 47,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "The value that should be set in this MField"
      }
    ],
    "return": null
  },
  {
    "__docId__": 190,
    "kind": "method",
    "name": "getValue",
    "memberof": "framework/dataManager/fields/MFieldSingle.js~MField",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "framework/dataManager/fields/MFieldSingle.js~MField#getValue",
    "access": "public",
    "description": "",
    "lineNumber": 59,
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "This MFields value"
    },
    "params": []
  },
  {
    "__docId__": 191,
    "kind": "method",
    "name": "getType",
    "memberof": "framework/dataManager/fields/MFieldSingle.js~MField",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "framework/dataManager/fields/MFieldSingle.js~MField#getType",
    "access": "public",
    "description": "",
    "lineNumber": 66,
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "A string representing this MFields type"
    },
    "params": []
  },
  {
    "__docId__": 192,
    "kind": "method",
    "name": "toString",
    "memberof": "framework/dataManager/fields/MFieldSingle.js~MField",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "framework/dataManager/fields/MFieldSingle.js~MField#toString",
    "access": "public",
    "description": "",
    "lineNumber": 73,
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "String representing this MFields value"
    },
    "params": []
  },
  {
    "__docId__": 193,
    "kind": "method",
    "name": "validate",
    "memberof": "framework/dataManager/fields/MFieldSingle.js~MField",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "framework/dataManager/fields/MFieldSingle.js~MField#validate",
    "access": "public",
    "description": null,
    "lineNumber": 77,
    "undocument": true,
    "params": [
      {
        "name": "value",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "{\"valid\": *, \"error\": *}"
      ]
    }
  },
  {
    "__docId__": 194,
    "kind": "method",
    "name": "is",
    "memberof": "framework/dataManager/fields/MFieldSingle.js~MField",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "framework/dataManager/fields/MFieldSingle.js~MField#is",
    "access": "public",
    "description": null,
    "lineNumber": 88,
    "undocument": true,
    "params": [
      {
        "name": "other",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 195,
    "kind": "class",
    "name": "NumberMField",
    "memberof": "framework/dataManager/fields/MFieldSingle.js",
    "static": true,
    "longname": "framework/dataManager/fields/MFieldSingle.js~NumberMField",
    "access": "public",
    "export": true,
    "importPath": "ManagedDataJS/framework/dataManager/fields/MFieldSingle.js",
    "importStyle": "{NumberMField}",
    "description": "Number implementation of MField which checks the following constraints:\n\t\t\n\tREQUIRED:\n\t\t\tvalue \t\t\t\t\t\t\t===>\ttypeof(value) == typeof(Number)\n\tOPTIONAL:\n\t\tminimum && exclusiveMinimum \t===> \tvalue > minimum\n\t\tminimum \t\t\t\t\t\t===>\tvalue >= minimum\n\t\tmaximum && exclusiveMaximum\t\t===>\tvalue < maximum\n\t\tmaximum \t\t\t\t\t\t===>\tvalue <= maximum\n\t\tmultipleOf\t\t\t\t\t\t===>\tvalue%multipleOf == 0",
    "lineNumber": 111,
    "interface": false,
    "extends": [
      "MField"
    ]
  },
  {
    "__docId__": 196,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "framework/dataManager/fields/MFieldSingle.js~NumberMField",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "framework/dataManager/fields/MFieldSingle.js~NumberMField#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 115,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "schema",
        "description": "A JSON schema that describes this MFields value"
      }
    ]
  },
  {
    "__docId__": 197,
    "kind": "method",
    "name": "validate",
    "memberof": "framework/dataManager/fields/MFieldSingle.js~NumberMField",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "framework/dataManager/fields/MFieldSingle.js~NumberMField#validate",
    "access": "public",
    "description": "",
    "lineNumber": 128,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "The value that should be validated"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean, Error"
      ],
      "spread": false,
      "description": "Validate returns a boolean indicating whether the field is valid. If it is invalid an error is also returned"
    }
  },
  {
    "__docId__": 198,
    "kind": "class",
    "name": "IntegerMField",
    "memberof": "framework/dataManager/fields/MFieldSingle.js",
    "static": true,
    "longname": "framework/dataManager/fields/MFieldSingle.js~IntegerMField",
    "access": "public",
    "export": true,
    "importPath": "ManagedDataJS/framework/dataManager/fields/MFieldSingle.js",
    "importStyle": "{IntegerMField}",
    "description": "Integer implementation of MField which checks the following constraints:\n\n\tREQUIRED:\n\t\tvalue \t===>\tvalue%1 == 0",
    "lineNumber": 178,
    "interface": false,
    "extends": [
      "NumberMField"
    ]
  },
  {
    "__docId__": 199,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "framework/dataManager/fields/MFieldSingle.js~IntegerMField",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "framework/dataManager/fields/MFieldSingle.js~IntegerMField#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 182,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "schema",
        "description": "A JSON schema that describes this MFields value"
      }
    ]
  },
  {
    "__docId__": 200,
    "kind": "member",
    "name": "type",
    "memberof": "framework/dataManager/fields/MFieldSingle.js~IntegerMField",
    "static": false,
    "longname": "framework/dataManager/fields/MFieldSingle.js~IntegerMField#type",
    "access": "public",
    "description": "Override NumberMFields type",
    "lineNumber": 188,
    "type": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 201,
    "kind": "method",
    "name": "validate",
    "memberof": "framework/dataManager/fields/MFieldSingle.js~IntegerMField",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "framework/dataManager/fields/MFieldSingle.js~IntegerMField#validate",
    "access": "public",
    "description": "",
    "lineNumber": 196,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "The value that should be validated"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean, Error"
      ],
      "spread": false,
      "description": "Validate returns a boolean indicating whether the field is valid. If it is invalid an error is also returned"
    }
  },
  {
    "__docId__": 202,
    "kind": "class",
    "name": "StringMField",
    "memberof": "framework/dataManager/fields/MFieldSingle.js",
    "static": true,
    "longname": "framework/dataManager/fields/MFieldSingle.js~StringMField",
    "access": "public",
    "export": true,
    "importPath": "ManagedDataJS/framework/dataManager/fields/MFieldSingle.js",
    "importStyle": "{StringMField}",
    "description": "String implementation of MField which checks the following constraints:\n\n\tREQUIRED:\n\t\tvalue \t\t===>\ttypeof(value) == typeof(String)\n\tOPTIONAL:\n\t\tminLength\t===>\tvalue.length >= minLength\n\t\tmaxLength\t===>\tvalue.length <= maxLength\n\t\tpattern\t\t===>\tvalue matches pattern\n\t\tformat\t\t===>\tvalue is one of:\n\n\t\t\t\t\t\t\t\t\tdate-time\n\t\t\t\t\t\t\t\t\temail\n\t\t\t\t\t\t\t\t\thostname\n\t\t\t\t\t\t\t\t\tipv4\n\t\t\t\t\t\t\t\t\tipv6\n\t\t\t\t\t\t\t\t\turi",
    "lineNumber": 229,
    "interface": false,
    "extends": [
      "MField"
    ]
  },
  {
    "__docId__": 203,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "framework/dataManager/fields/MFieldSingle.js~StringMField",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "framework/dataManager/fields/MFieldSingle.js~StringMField#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 233,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "schema",
        "description": "A JSON schema that describes this MFields value"
      }
    ]
  },
  {
    "__docId__": 204,
    "kind": "method",
    "name": "validate",
    "memberof": "framework/dataManager/fields/MFieldSingle.js~StringMField",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "framework/dataManager/fields/MFieldSingle.js~StringMField#validate",
    "access": "public",
    "description": "",
    "lineNumber": 243,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "The value that should be validated"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean, Error"
      ],
      "spread": false,
      "description": "Validate returns a boolean indicating whether the field is valid. If it is invalid an error is also returned"
    }
  },
  {
    "__docId__": 205,
    "kind": "class",
    "name": "BooleanMField",
    "memberof": "framework/dataManager/fields/MFieldSingle.js",
    "static": true,
    "longname": "framework/dataManager/fields/MFieldSingle.js~BooleanMField",
    "access": "public",
    "export": true,
    "importPath": "ManagedDataJS/framework/dataManager/fields/MFieldSingle.js",
    "importStyle": "{BooleanMField}",
    "description": "Integer implementation of MField which checks the following constraints:\n\n\tREQUIRED:\n\t\tvalue \t===>\ttypeof(value) == typeof(Boolean)",
    "lineNumber": 311,
    "interface": false,
    "extends": [
      "MField"
    ]
  },
  {
    "__docId__": 206,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "framework/dataManager/fields/MFieldSingle.js~BooleanMField",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "framework/dataManager/fields/MFieldSingle.js~BooleanMField#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 315,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "schema",
        "description": "A JSON schema that describes this MFields value"
      }
    ]
  },
  {
    "__docId__": 207,
    "kind": "method",
    "name": "validate",
    "memberof": "framework/dataManager/fields/MFieldSingle.js~BooleanMField",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "framework/dataManager/fields/MFieldSingle.js~BooleanMField#validate",
    "access": "public",
    "description": "",
    "lineNumber": 324,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "The value that should be validated"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean, Error"
      ],
      "spread": false,
      "description": "Validate returns a boolean indicating whether the field is valid. If it is invalid an error is also returned"
    }
  },
  {
    "__docId__": 208,
    "kind": "class",
    "name": "MObjectMField",
    "memberof": "framework/dataManager/fields/MFieldSingle.js",
    "static": true,
    "longname": "framework/dataManager/fields/MFieldSingle.js~MObjectMField",
    "access": "public",
    "export": true,
    "importPath": "ManagedDataJS/framework/dataManager/fields/MFieldSingle.js",
    "importStyle": "{MObjectMField}",
    "description": "MObject implementation of MField which checks the following constraints:\n\n\tREQUIRED:\n\t\tvalue \t \t\t\t===>\tvalue instanceof MObject && value.klass == schema.klass\n\tOPTIONAL:\n\t\tinverse\t\t \t\t===>\t(value[inverse] == this || value[inverse].includes(this))",
    "lineNumber": 344,
    "interface": false,
    "extends": [
      "MField"
    ]
  },
  {
    "__docId__": 209,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "framework/dataManager/fields/MFieldSingle.js~MObjectMField",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "framework/dataManager/fields/MFieldSingle.js~MObjectMField#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 349,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "schema",
        "description": "A JSON schema that describes this MFields value"
      },
      {
        "nullable": null,
        "types": [
          "MObject"
        ],
        "spread": false,
        "optional": false,
        "name": "superKlass",
        "description": "The MObject that this field belongs to"
      }
    ]
  },
  {
    "__docId__": 210,
    "kind": "member",
    "name": "superKlass",
    "memberof": "framework/dataManager/fields/MFieldSingle.js~MObjectMField",
    "static": false,
    "longname": "framework/dataManager/fields/MFieldSingle.js~MObjectMField#superKlass",
    "access": "public",
    "description": "The MObject that this OneOfMField belongs to",
    "lineNumber": 356,
    "type": {
      "nullable": null,
      "types": [
        "MObject"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 211,
    "kind": "method",
    "name": "addRelatedObject",
    "memberof": "framework/dataManager/fields/MFieldSingle.js~MObjectMField",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "framework/dataManager/fields/MFieldSingle.js~MObjectMField#addRelatedObject",
    "access": "public",
    "description": null,
    "lineNumber": 359,
    "undocument": true,
    "params": [
      {
        "name": "other",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 212,
    "kind": "method",
    "name": "removeRelatedObject",
    "memberof": "framework/dataManager/fields/MFieldSingle.js~MObjectMField",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "framework/dataManager/fields/MFieldSingle.js~MObjectMField#removeRelatedObject",
    "access": "public",
    "description": null,
    "lineNumber": 363,
    "undocument": true,
    "params": [
      {
        "name": "other",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 213,
    "kind": "member",
    "name": "value",
    "memberof": "framework/dataManager/fields/MFieldSingle.js~MObjectMField",
    "static": false,
    "longname": "framework/dataManager/fields/MFieldSingle.js~MObjectMField#value",
    "access": "public",
    "description": null,
    "lineNumber": 365,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 214,
    "kind": "method",
    "name": "validate",
    "memberof": "framework/dataManager/fields/MFieldSingle.js~MObjectMField",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "framework/dataManager/fields/MFieldSingle.js~MObjectMField#validate",
    "access": "public",
    "description": "",
    "lineNumber": 374,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "The value that should be validated"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean, Error"
      ],
      "spread": false,
      "description": "Validate returns a boolean indicating whether the field is valid. If it is invalid an error is also returned"
    }
  },
  {
    "__docId__": 215,
    "kind": "method",
    "name": "setValue",
    "memberof": "framework/dataManager/fields/MFieldSingle.js~MObjectMField",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "framework/dataManager/fields/MFieldSingle.js~MObjectMField#setValue",
    "access": "public",
    "description": null,
    "lineNumber": 392,
    "undocument": true,
    "params": [
      {
        "name": "value",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 216,
    "kind": "file",
    "name": "framework/mixins/Locking.js",
    "content": "/**\n * A mixin that provides functionality for locking and unlocking MObjects\n * Please refer to source for documentation on this Mixin. The documentation\n * generator does not work properly with mixin definition\n */\nexport let Locking = (superclass) => class extends superclass {\n\t/**\n\t * @param {KlassSchema} schema - A KlassSchema describing this MObject's data\n\t */\n\tconstructor(schema, ...otherArgs) {\n\t\tsuper(schema, ...otherArgs);\n\t\t/**\n\t\t * @type{Boolean} Indicates whether the object is locked. When locked === true the object cannot be modified\n\t\t */\n\t\tthis.locked = false;\n\t}\n\n\t/**\n\t * @param {Symbol, String} propKey - The property key to set in this.data\n\t * @param {*} value - The value to set this.data[propKey] to\n\t * @return {Boolean} True if setting the value was succesfull\n\t * @throws {TypeError}\n\t */\n\tset(propKey, value) {\n\t\tif(this.locked == true) {\n\t\t\tthrow new TypeError(\"object is locked\");\n\t\t}\n\t\treturn super.set(propKey, value);\n\t}\n\n\t/**\n\t * @param {Symbol, String} propKey - The property key to look for in this.data\n\t * @return {Boolean} True if getting the value was succesfull\n\t * @throws {TypeError}\n\t */\n\tget(propKey) {\n\t\treturn super.get(propKey);\n\t}\n\n\t/**\n\t * Sets locked to true\n\t */\n\tlock() {\n\t\tthis.locked = true;\n\t}\n\n\t/**\n\t * @return {Boolean} True if locked, false otherwise\n\t */\n\tisLocked() {\n\t\treturn this.locked;\n\t}\n\n\t/**\n\t * Sets locked to false\n\t */\n\tunlock() {\n\t\tthis.locked = false;\n\t}\n\n\t/**\n\t * @param {String} method - A string representing the name of the method that was called on the managedArray\n\t * @param {Array} args - An array containing the arguments that will be passed to the method\n\t * @param {ManagedArray} array - The array that the method was invoked on\n\t *\n\t * @return {Array} - An array containing the args that were passed to this function. If the args are modified,\n\t * \t\t\t\t\t the invoked array method will execute 'method' with the modified arguments instead.\n\t */\n\tnotifyArray(method, args, array) {\n\t\targs = super.notifyArray(method, args, array)\n\t\tlet methodsWithSideEffects = [\"push\", \"splice\", \"pop\", \"shift\", \"unshift\"]\n\t\t\n\t\tif(this.isLocked() && methodsWithSideEffects.includes(method)) {\n\t\t\tthrow TypeError(\"object is locked\")\n\t\t}\n\t\treturn args\n\t}\n}",
    "static": true,
    "longname": "/home/gebruiker/Documenten/BSc/code/ManagedDataJS/src/js/framework/mixins/Locking.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 217,
    "kind": "function",
    "name": "Locking",
    "memberof": "framework/mixins/Locking.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "framework/mixins/Locking.js~Locking",
    "access": "public",
    "export": true,
    "importPath": "ManagedDataJS/framework/mixins/Locking.js",
    "importStyle": "{Locking}",
    "description": "A mixin that provides functionality for locking and unlocking MObjects\nPlease refer to source for documentation on this Mixin. The documentation\ngenerator does not work properly with mixin definition",
    "lineNumber": 6,
    "params": [
      {
        "name": "superclass",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 218,
    "kind": "file",
    "name": "framework/mixins/Logging.js",
    "content": "/**\n * A mixin that logs get, set and array change events\n * Please refer to source for documentation on this Mixin. The documentation\n * generator does not work properly with mixin definition\n */\nexport let Logging = (superclass) => class extends superclass {\n\t/**\n\t * @param {Schema} - A Schema object that represents the data that this managed object has to manage\n\t */\n\tconstructor(schema) {\n\t\tsuper(schema);\n\t}\n\t/**\n\t * Set the value at index 'propKey' to value and log which property is being set, which key it is assigned to \n\t * and which value is being set\n\t * @param {String, Symbol} propKey - The property key of the managed field that we want to access\n\t * @param {*} value - The value that we want to set the managed field to\n\t *\n\t * @return {Boolean} True if setting was succesfull\n\t */\n\tset(propKey, value) {\n\t\tlet result;\n\t\ttry {\n\t\t\tresult = super.set(propKey, value);\n\t\t\tconsole.log(\"set property \"+propKey+\" of klass \"+this.schema.getKlass()+\" to value: \"+ JSON.stringify(value));\n\t\t} catch (err) {\n\t\t\tconsole.log(\"An error occured when setting property \"+propKey+\" of klass \"+this.schema.getKlass()+\" to value: \" + JSON.stringify(value));\n\t\t\tthrow err\n\t\t}\n\t\treturn result;\n\t}\n\n\t/**\n\t * Log which property is being retrieved\n\t *\n\t * @param {String, Symbol} propKey - The property key of the managed field that we want to access\n\t *\n\t * @return {*} The value of the requested property, if it exists.\n\t * @throws {TypeError} An error is thrown if the field does not exist in this MObject's schema\n\t */\n\tget(propKey) {\n\t\tlet result;\n\t\ttry {\n\t\t\tresult = super.get(propKey);\n\t\t\tconsole.log(\"getting property \"+propKey+\" of klass \"+this.schema.getKlass());\n\t\t} catch (err) {\n\t\t\tconsole.log(\"An error occured when getting property \"+propKey+\" of klass \"+this.schema.getKlass())\n\t\t\tthrow err\n\t\t}\n\t\treturn result;\n\t}\n\n\t/**\n\t * Log which array method has been called\n\t *\n\t * @param {String} method - A string representing the name of the method that was called on the managedArray\n\t * @param {Array} args - An array containing the arguments that will be passed to the method\n\t * @param {ManagedArray} array - The array that the method was invoked on\n\t *\n\t * @return {Array} - An array containing the args that were passed to this function. If the args are modified,\n\t * \t\t\t\t\t the invoked array method will execute 'method' with the modified arguments instead.\n\t */\n\tnotifyArray(method, args, array) {\n\t\targs= super.notifyArray(method, args, array)\n\t\tconsole.log(\"invoked \"+method+\" on ManagedArray in object \"+this.schema.getKlass()+\" with arguments \"+args.toString())\n\t\treturn args\n\t}\n}",
    "static": true,
    "longname": "/home/gebruiker/Documenten/BSc/code/ManagedDataJS/src/js/framework/mixins/Logging.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 219,
    "kind": "function",
    "name": "Logging",
    "memberof": "framework/mixins/Logging.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "framework/mixins/Logging.js~Logging",
    "access": "public",
    "export": true,
    "importPath": "ManagedDataJS/framework/mixins/Logging.js",
    "importStyle": "{Logging}",
    "description": "A mixin that logs get, set and array change events\nPlease refer to source for documentation on this Mixin. The documentation\ngenerator does not work properly with mixin definition",
    "lineNumber": 6,
    "params": [
      {
        "name": "superclass",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 220,
    "kind": "file",
    "name": "framework/mixins/Persistence.js",
    "content": "import {MObject} from \"../dataManager/MObject\";\nimport {MFieldFactory} from \"../dataManager/fields/MFieldFactory\";\nimport {ArrayMField} from \"../dataManager/fields/MFieldMulti\"\n\n/**\n * A persistence mixin that:\n * - serializes this.data\n * - saves all MObjects stored in this.data\n * - saves a serialized verion of itself\n * - loads an earlier state from local storage based on a given \n *\n * Please refer to source for documentation on this Mixin. The documentation\n * generator does not work properly with mixin definition\n */\nexport let Persistence = (superclass) => class extends superclass {\n\t/**\n\t * @param {DataManager} factory - An instance of DataManager that this persistent MObject can use\n\t * to construct new MObjects when loading\n\t */\n\tsetFactory(factory) {\n\t\tthis.factory = factory\n\t}\n\n\t/**\n\t * @param {String} id - An ID used to identify, save and load this MObject. Must be unique\n\t */\n\tsetId(id) {\n\t\tconsole.log(\"setting id:\", id)\n\t\tthis.id = id\n\t}\n\n\t/**\n\t * @param {Symbol, String} propKey - The property key to set in this.data\n\t * @param {*} value - The value to set this.data[propKey] to\n\t * @return {Boolean} True if setting the value was succesfull\n\t * @throws {TypeError}\n\t */\n\tset(propKey, value) {\n\t\tlet result = super.set(propKey, value);\t\n\t\treturn result;\n\t}\n\n\t/**\n\t * @return {String} the id used to save this Persistent MObject\n\t */\n\tgetId() {\n\t\tif(this.hasOwnProperty(\"id\")) {\n\t\t\treturn this.id;\n\t\t} else {\n\t\t\tthrow new TypeError(\"No id has been set for MObject \" + this.toString())\n\t\t}\n\t}\n\n\t/**\n\t * @return {Object} A serialized version of this.data\n\t */\n\tserialize() {\n\t\tlet obj = {}\n\t\tfor(let propKey in this.data) {\n\t\t\tobj[propKey] = this.serializeProp(this.data[propKey])\n\t\t}\n\t\treturn obj\n\t}\n\n\t/**\n\t * @param {MField} prop - An instance of MField to serialize\n\t * @return {*} A serialized version of the given MField\n\t */\n\tserializeProp(prop) {\n\t\tswitch(prop.getType()) {\n\t\t\tcase \"object\": {\n\t\t\t\treturn this.serializeObject(prop.getValue())\n\t\t\t\tbreak\n\t\t\t}\n\t\t\tcase \"array\": {\n\t\t\t\treturn this.serializeArray(prop)\n\t\t\t\tbreak\n\t\t\t}\n\t\t\tdefault: {\n\t\t\t\treturn prop.getValue()\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @param {ArrayMField} prop - An instance of ArrayMField to serialize\n\t * @return {Array} A serialized version of the given array\n\t */\n\tserializeArray(prop) {\n\t\tlet arr = []\n\t\tfor(let item of prop) {\n\t\t\tif(item instanceof MObject) {\n\t\t\t\tarr.push(this.serializeObject(item))\n\t\t\t} else if(item instanceof ArrayMField) {\n\t\t\t\tarr.push(this.serializeArray(item))\n\t\t\t} else {\n\t\t\t\tarr.push(item)\n\t\t\t}\n\t\t}\n\t\treturn arr\n\t}\n\n\t/**\n\t * @param {MObjectMField} prop - An MObjectMField to serialize\n\t * @return {Object} - A serialized version of the MObject\n\t */\n\tserializeObject(prop) {\n\t\treturn {klass: prop.getKlass(), id: prop.getId()}\n\t}\n\n\t/**\n\t * A method that saves this.data\n\t * @param {number} [time] - A timestamp that indicates when saving started\n\t */\n\tsave(time) {\n\t\tconsole.log(\"saving: \", time);\n\t\t/* get current time and set time if not defined */\n\t\tlet now = new Date().getTime();\n\t\tif(time == undefined) {\n\t\t\ttime = now;\n\t\t}\n\n\t\t/* check if this item has been saved already */\n\t\tlet loadedItem = JSON.parse(localStorage.getItem(this.getId()));\n\t\tif(loadedItem && loadedItem.updated_at >= time) {\n\t\t\treturn;\n\t\t}\n\n\t\t/* initialize saveItem and serialize this.data */\n\t\tlet saveItem = this.serialize()\n\t\tsaveItem.updated_at = now\n\n\t\t/* save the item */\n\t\tlocalStorage.setItem(this.getId(), JSON.stringify(saveItem));\n\n\t\t/* go over each property and if its managed data, call that items save function */\n\t\tfor(let prop in this.data) {\n\t\t\tthis.saveProp(this.data[prop], time);\n\t\t}\n\t}\n\n\t/**\n\t * Save the given property if it is an MObject or Array\n\t * @param {MField} prop - The MField to save\n\t * @param {number} [time] - A timestamp that indicates when saving started\n\t */\n\tsaveProp(prop, time) {\n\t\tconsole.log(\"saving prop:\", prop, prop.getType())\n\t\tswitch(prop.getType()) {\n\t\t\tcase \"object\": {\n\t\t\t\tprop.getValue().save(time)\n\t\t\t\tbreak\n\t\t\t}\n\t\t\tcase \"array\": {\n\t\t\t\tthis.saveArray(prop, time); console.log(\"arr\")\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Save the MObjects in the given array, if there are any\n\t * @param {ArrayMField} prop - The ArrayMField to save\n\t * @param {number} [time] - A timestamp that indicates when saving started\n\t */\n\tsaveArray(prop, time) {\n\t\tconsole.log(\"saving array:\", prop)\n\t\tfor(let item of prop) {\n\t\t\tif(item instanceof MObject) {\n\t\t\t\titem.save(time)\n\t\t\t} else if (item instanceof ArrayMField) {\n\t\t\t\tthis.saveArray(item, time)\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Load an earlier state of this MObject from localStorage\n\t * @param {Array} loadedItems - An array containing all items that were loaded so far\n\t */\n\tload(loadedItems) {\n\t\tif(loadedItems == undefined) {\n\t\t\tloadedItems = []\n\t\t}\n\t\tif(!loadedItems.includes(this.proxy)) {\n\t\t\tloadedItems.push(this.proxy)\n\t\t}\n\n\t\tlet item = JSON.parse(localStorage.getItem(this.getId()))\n\t\tdelete item.updated_at\n\t\tif(item != undefined) {\n\t\t\tfor(let propKey in item) {\n\t\t\t\tthis.proxy[propKey] = this.loadProp(item[propKey], loadedItems)\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Loads a single property\n\t * @param {Object} prop - The serialized property to load into this MObject\n\t * @param {Array} loadeditems - An array containing all items that were loaded so far\n\t * @return {Object} The loaded property\n\t */\n\tloadProp(prop, loadedItems) {\n\t\tif (prop.hasOwnProperty(\"klass\")) {\n\t\t\treturn this.loadObject(prop, loadedItems)\n\t\t} else if(prop instanceof Array) {\n\t\t\treturn this.loadArray(prop, loadedItems)\n\t\t} else {\n\t\t\treturn prop\n\t\t}\n\t}\n\n\t/**\n\t * Load an array of properties\n\t * @param {Array} prop - An array of serialized properties\n\t * @param {Array} loadeditems - An array containing all items that were loaded so far\n\t * @return {Array} An array containing the loaded properties\n\t */\n\tloadArray(prop, loadedItems) {\n\t\tlet arr = []\n\t\tfor(let item of prop) {\n\t\t\tif(item.hasOwnProperty(\"klass\")) {\n\t\t\t\tarr.push(this.loadObject(item, loadedItems))\n\t\t\t} else if(prop instanceof Array) {\n\t\t\t\tarr.push(this.loadArray(item, loadedItems))\n\t\t\t} else {\n\t\t\t\tarr.push(item)\n\t\t\t}\n\t\t}\n\t\treturn arr\n\t}\n\n\t/**\n\t * Load an MObject property\n\t * @param {Array} prop - A serialized MObject\n\t * @param {Array} loadeditems - An array containing all items that were loaded so far\n\t * @return {MObject} The loaded MObject \n\t * @throws {TypeError} An error is thrown if no DataManager is set. MObjects cannot be constructed without a DataManager.\n\t */\n\tloadObject(prop, loadedItems) {\n\t\tif(!this.hasOwnProperty(\"factory\")) {\n\t\t\tthrow new TypeError(\"MObjects cannot be loaded from localStorage without a DataManager capable of constructing the saved MObject\")\n\t\t}\n\t\t/* Check if the object was loaded before*/\n\t\tfor(let item of loadedItems) {\n\t\t\tif(item.getId() == prop.id) {\n\t\t\t\treturn item;\n\t\t\t}\n\t\t}\n\n\t\t/* Otherwise: create a simple empty MObject and tell it to load its data*/\n\t\tlet newObj = new this.factory[prop.klass]();\n\t\tnewObj.setFactory(this.factory)\n\t\tnewObj.setId(prop.id)\n\t\tnewObj.load(loadedItems);\n\t\treturn newObj;\n\t}\n}",
    "static": true,
    "longname": "/home/gebruiker/Documenten/BSc/code/ManagedDataJS/src/js/framework/mixins/Persistence.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 221,
    "kind": "function",
    "name": "Persistence",
    "memberof": "framework/mixins/Persistence.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "framework/mixins/Persistence.js~Persistence",
    "access": "public",
    "export": true,
    "importPath": "ManagedDataJS/framework/mixins/Persistence.js",
    "importStyle": "{Persistence}",
    "description": "A persistence mixin that:\n- serializes this.data\n- saves all MObjects stored in this.data\n- saves a serialized verion of itself\n- loads an earlier state from local storage based on a given \n\nPlease refer to source for documentation on this Mixin. The documentation\ngenerator does not work properly with mixin definition",
    "lineNumber": 15,
    "params": [
      {
        "name": "superclass",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 222,
    "kind": "file",
    "name": "framework/mixins/index.js",
    "content": "import {Locking} from \"./Locking\"\nimport {Logging} from \"./Logging\"\nimport {Persistence} from \"./Persistence\"\n\nexport {Locking, Logging, Persistence}",
    "static": true,
    "longname": "/home/gebruiker/Documenten/BSc/code/ManagedDataJS/src/js/framework/mixins/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "kind": "index",
    "content": "# ManagedDataJS\n\n## Installation:\n\nNodejs version: node.js@6.11.2\n\nNPM version: npm@3.10.10\n\n\n\n#### Clean install:\n\ndownload node https://nodejs.org/dist/v6.11.2/\n\nextract and copy the directories [bin, include, lib, share] to /usr/[bin, include, lib, share]\n\n\n#### Replace the broken symbolic link to npm:\n\n$  sudo rm /usr/bin/npm\n\n$  sudo ln -s /usr/lib/node_modules/npm/bin/npm-cli.js /usr/bin/npm\n\n\n#### check node and npm version:\n\n$  node -v\n\nv6.11.2\n\n$  npm -v\n\n3.10.10\n\n\n#### clone repository, install dependencies, compile js and run server:\n\n$  git clone https://github.com/rvanbuijtenen/ManagedDataJS.git\n\n$  cd ManagedDataJS\n\n$  npm install\n\n$  npm run webpack\n\n$  npm run start\n\n#### Open the browser at localhost:8080 to view examples and documentation\n\n",
    "longname": "/home/gebruiker/Documenten/BSc/code/ManagedDataJS/README.md",
    "name": "./README.md",
    "static": true,
    "access": "public"
  },
  {
    "kind": "packageJSON",
    "content": "{\n  \"name\": \"ManagedDataJS\",\n  \"version\": \"0.0.0\",\n  \"description\": \"An implementation of Managed Data in Javascript using ES6 proxies\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"babel\": \"./node_modules/.bin/babel --presets es2015 src/js/main.js -o build/main.bundle.js\",\n    \"start\": \"./node_modules/.bin/http-server -p 8080\",\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\",\n    \"webpack\": \"./node_modules/.bin/webpack\",\n    \"doc\": \"./node_modules/.bin/esdoc\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/rvanbuijtenen/ManagedDataJS.git\"\n  },\n  \"author\": \"Remco van Buijtenen\",\n  \"license\": \"ISC\",\n  \"bugs\": {\n    \"url\": \"https://github.com/rvanbuijtenen/ManagedDataJS/issues\"\n  },\n  \"dependencies\": {\n    \"babel-cli\": \"^6.24.1\",\n    \"babel-core\": \"^6.24.1\",\n    \"babel-loader\": \"^7.0.0\",\n    \"babel-preset-es2015\": \"^6.24.1\",\n    \"babel-preset-stage-2\": \"^6.24.1\",\n    \"esdoc\": \"^1.0.1\",\n    \"esdoc-standard-plugin\": \"^1.0.0\",\n    \"http-server\": \"^0.10.0\",\n    \"webpack\": \"^2.5.0\"\n  }\n}\n",
    "longname": "/home/gebruiker/Documenten/BSc/code/ManagedDataJS/package.json",
    "name": "package.json",
    "static": true,
    "access": "public"
  }
]